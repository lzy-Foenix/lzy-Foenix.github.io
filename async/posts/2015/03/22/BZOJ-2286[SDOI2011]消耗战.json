{"tags":[{"name":"LCA","permalink":"http://lzy-foenix.github.io/tags/LCA/","url":"\\async\\tags\\LCA.json","count":4}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\22\\BZOJ-2286[SDOI2011]消耗战.json","date":1427018642000,"path":{"year":2015,"month":3,"day":22,"name":"BZOJ-2286[SDOI2011]消耗战"},"title":"BZOJ-2286[SDOI2011]消耗战","permalink":"http://lzy-foenix.github.io/2015/03/22/BZOJ-2286[SDOI2011]消耗战/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>跪LCA单调性，跪虚树。。。。</p>\n<p>作为一个连树形dp都不熟的蒟蒻，这题简直要虐爆我了</p>\n<p>首先我们考虑每次都做一遍树形DP,显然这是TLE无疑的。</p>\n<p>所以可以利用LCA单调性构建虚树。<br>思想：<br>我们发现每次树形DP有很多点用不到，但是却需要被扫过，让他们见鬼去吧！</p>\n<p>实现：<br>我们只对每次扫的图插入本次询问需要的节点，以及它们的LCA。<br>这样询问了m个点，虚树就至多只需要2m个点（so quick）。<br>而插入顺序上不妨利用LCA单调性来把点按dfs度排个序，然后挨个插入单调栈。<br>同时我们要保证单调栈维护的是一条链，也就是一旦不是链了，我们自然可以求LCA，然后在新图建边，然后出栈，然后balabala~~</p>\n<p>这块不妨看代码。</p>\n<p>最后的时间复杂度可以理解为O（∑ki）的，也就是50W，但是实现技巧上需要一些预处理，即倍增LCA的nlogn。<br>但是速度还是很快的。</p>\n<p><a href=\"http://blog.csdn.net/Vmurder/article/details/42555643\" target=\"_blank\" rel=\"external\">大神题解</a></p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 510010</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> Complex&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,pos;</div><div class=\"line\">\t</div><div class=\"line\">\tComplex(<span class=\"keyword\">int</span> _,<span class=\"keyword\">int</span> __):x(_),pos(__) &#123;&#125;</div><div class=\"line\">\tComplex() &#123;&#125;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> Complex &amp;a)<span class=\"keyword\">const</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pos &lt; a.pos;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;src[MAX];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> points,asks;</div><div class=\"line\"><span class=\"keyword\">int</span> head[MAX],total;</div><div class=\"line\"><span class=\"keyword\">int</span> next[MAX],aim[MAX],length[MAX];</div><div class=\"line\"><span class=\"keyword\">int</span> pos[MAX],cnt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> len)</span></span>&#123;</div><div class=\"line\">\tnext[++total] = head[x];</div><div class=\"line\">\taim[total] = y;</div><div class=\"line\">\tlength[total] = len;</div><div class=\"line\">\thead[x] = total;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> father[MAX][<span class=\"number\">20</span>],_min[MAX][<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> deep[MAX];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> last)</span></span>&#123;</div><div class=\"line\">\tdeep[x] = deep[last] + <span class=\"number\">1</span>;</div><div class=\"line\">\tpos[x] = ++cnt;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[x]; i; i = next[i])&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(aim[i] == last)\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\tfather[aim[i]][<span class=\"number\">0</span>] = x;</div><div class=\"line\">\t\t_min[aim[i]][<span class=\"number\">0</span>] = length[i];</div><div class=\"line\">\t\tDFS(aim[i],x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MakeTable</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">19</span>; ++j)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= points; ++i) &#123;</div><div class=\"line\">\t\t\tfather[i][j] = father[father[i][j - <span class=\"number\">1</span>]][j - <span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t_min[i][j] = min(_min[i][j - <span class=\"number\">1</span>],_min[father[i][j - <span class=\"number\">1</span>]][j - <span class=\"number\">1</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">GetLCA</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(deep[x] &lt; deep[y])\tswap(x,y);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">19</span>; ~i; --i)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(deep[father[x][i]] &gt;= deep[y])</div><div class=\"line\">\t\t\tx = father[x][i];</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x == y)\t<span class=\"keyword\">return</span> x;\t</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">19</span>; ~i; --i)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(father[x][i] != father[y][i])</div><div class=\"line\">\t\t\tx = father[x][i],y = father[y][i];</div><div class=\"line\">\t<span class=\"keyword\">return</span> father[x][<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">GetMin</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(deep[x] &lt; deep[y])\tswap(x,y);</div><div class=\"line\">\t<span class=\"keyword\">int</span> re = INF;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">19</span>; ~i; --i)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(deep[father[x][i]] &gt;= deep[y]) &#123;</div><div class=\"line\">\t\t\tre = min(re,_min[x][i]);</div><div class=\"line\">\t\t\tx = father[x][i];\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">19</span>; ~i; --i)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(father[x][i] != father[y][i]) &#123;</div><div class=\"line\">\t\t\tre = min(re,_min[x][i]);</div><div class=\"line\">\t\t\tre = min(re,_min[y][i]);</div><div class=\"line\">\t\t\tx = father[x][i];</div><div class=\"line\">\t\t\ty = father[y][i];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x != y)\tre = min(re,min(_min[x][<span class=\"number\">0</span>],_min[y][<span class=\"number\">0</span>]));</div><div class=\"line\">\t<span class=\"keyword\">return</span> re;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> Graph&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> head[MAX],v[MAX],T,total;</div><div class=\"line\">\t<span class=\"keyword\">int</span> next[MAX],aim[MAX];</div><div class=\"line\">\t<span class=\"keyword\">int</span> super[MAX];</div><div class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> f[MAX];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt;  endl;</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(v[x] != T) &#123;</div><div class=\"line\">\t\t\tv[x] = T;</div><div class=\"line\">\t\t\thead[x] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tnext[++total] = head[x];</div><div class=\"line\">\t\taim[total] = y;</div><div class=\"line\">\t\thead[x] = total;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Set</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">\t\tsuper[x] = T;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TreeDP</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">\t\tf[x] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(v[x] != T) &#123;</div><div class=\"line\">\t\t\tv[x] = T;</div><div class=\"line\">\t\t\thead[x] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[x]; i; i = next[i]) &#123;</div><div class=\"line\">\t\t\tTreeDP(aim[i]);</div><div class=\"line\">\t\t\tf[x] += min(super[aim[i]] == T ? INF:f[aim[i]],(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)GetMin(x,aim[i]));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;graph;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; points;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x,y,z,i = <span class=\"number\">1</span>; i &lt; points; ++i)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;x,&amp;y,&amp;z);</div><div class=\"line\">\t\tAdd(x,y,z),Add(y,x,z);\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tDFS(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</div><div class=\"line\">\tMakeTable();</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; asks;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> cnt,i = <span class=\"number\">1</span>; i &lt;= asks; ++i)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;cnt);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= cnt; ++j)</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;src[j].x),src[j].pos = pos[src[j].x];</div><div class=\"line\">\t\tsort(src + <span class=\"number\">1</span>,src + cnt + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t++graph.T;</div><div class=\"line\">\t\tgraph.total = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[MAX];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> top = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">stack</span>[++top] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= cnt; ++j)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> lca = GetLCA(<span class=\"built_in\">stack</span>[top],src[j].x);</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span>(deep[lca] &lt; deep[<span class=\"built_in\">stack</span>[top]])&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(deep[<span class=\"built_in\">stack</span>[top - <span class=\"number\">1</span>]] &lt;= deep[lca])&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> away = <span class=\"built_in\">stack</span>[top--];</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">stack</span>[top] != lca)</div><div class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">stack</span>[++top] = lca;</div><div class=\"line\">\t\t\t\t\tgraph.Add(lca,away);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tgraph.Add(<span class=\"built_in\">stack</span>[top - <span class=\"number\">1</span>],<span class=\"built_in\">stack</span>[top]),--top;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">stack</span>[top] != src[j].x)</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">stack</span>[++top] = src[j].x;</div><div class=\"line\">\t\t\tgraph.Set(src[j].x);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(top)</div><div class=\"line\">\t\t\tgraph.Add(<span class=\"built_in\">stack</span>[top - <span class=\"number\">1</span>],<span class=\"built_in\">stack</span>[top]),--top;</div><div class=\"line\">\t\tgraph.TreeDP(<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,graph.f[<span class=\"number\">1</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}