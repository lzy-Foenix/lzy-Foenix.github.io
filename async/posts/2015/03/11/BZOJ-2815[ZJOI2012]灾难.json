{"tags":[{"name":"LCA","permalink":"http://lzy-foenix.github.io/tags/LCA/","url":"\\async\\tags\\LCA.json","count":4}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\11\\BZOJ-2815[ZJOI2012]灾难.json","date":1426078925000,"path":{"year":2015,"month":3,"day":11,"name":"BZOJ-2815[ZJOI2012]灾难"},"title":"BZOJ-2815[ZJOI2012]灾难","permalink":"http://lzy-foenix.github.io/2015/03/11/BZOJ-2815[ZJOI2012]灾难/","content":"<hr>\n<a id=\"more\"></a>\n<p>出现新树种：灭绝树！！</p>\n<h3 id=\"膜拜题解\"><a href=\"#膜拜题解\" class=\"headerlink\" title=\"膜拜题解\"></a>膜拜题解</h3><p>详情请看 <a href=\"http://fanhq666.blog.163.com/blog/static/8194342620124274154996/\" target=\"_blank\" rel=\"external\">http://fanhq666.blog.163.com/blog/static/8194342620124274154996/</a><br>大体思路就是如果一个动物要灭绝，那么他吃的食物都要灭绝，而他吃的食物要灭绝的话就要求他的食物的LCA，然后把这个动物放到LCA节点上，最后求每个节点的子树大小，然后减一输出。</p>\n<p>###具体细节<br>题解说的很简单，如果就按照题解做的话，可能会被坑了，显然题目给出的结构不是一棵树，那么要是直接算LCA的话就会跪的不明不白的。所以要另建一颗树。要建树就要保证一定的顺序，这个顺序就是先建立深度小的节点，再构建深度大的节点，这样就能保证后面的节点在做LCA的时候不会找不到父亲。说白了就是拓扑排序= =。构建新的树要采用边求LCA边建树的过程</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">70000</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXD=<span class=\"number\">21</span>;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;V;</div><div class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Tmp;</div><div class=\"line\"><span class=\"keyword\">int</span> N,len,head[MAXN],st,flen,fhead[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> Out[MAXN],In[MAXN],fa[MAXN][MAXD],Deep[MAXN],son[MAXN];</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">&#125;A[<span class=\"number\">100005</span>&lt;&lt;<span class=\"number\">1</span>],F[<span class=\"number\">100005</span>&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++;  A[len].to=b;  A[len].next=head[a];   head[a]=len;</div><div class=\"line\">&#125;<span class=\"comment\">//最终树</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FAdd_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tflen++; F[flen].to=b; F[flen].next=fhead[a]; fhead[a]=flen;</div><div class=\"line\">&#125;<span class=\"comment\">//反向边</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N); <span class=\"keyword\">int</span> a;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a)&amp;&amp;a)&#123;</div><div class=\"line\">\t\t\tFAdd_edge(i,a); In[a]++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!In[i])Tmp.push(i);<span class=\"comment\">//找出最高级捕食者</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Tmp.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t=Tmp.front(); Tmp.pop(); V.push_back(t);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=fhead[t],y=F[i].to;i;i=F[i].next,y=F[i].to)&#123;</div><div class=\"line\">\t\t\tIn[y]--;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!In[y])Tmp.push(y);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"comment\">//拓扑排序 </span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ElseInit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,k=<span class=\"number\">1</span>;k&lt;=Deep[x];i++,k&lt;&lt;=<span class=\"number\">1</span>)</div><div class=\"line\">\t\tfa[x][i]=fa[fa[x][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x==<span class=\"number\">-1</span>)<span class=\"keyword\">return</span> y;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(Deep[x]&lt;Deep[y])swap(x,y);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=MAXD<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Deep[fa[x][j]]&gt;=Deep[y])x=fa[x][j];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x!=y)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=MAXD<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(fa[x][j]!=fa[y][j])&#123;</div><div class=\"line\">\t\t\t\tx=fa[x][j]; y=fa[y][j];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x==y? x:(fa[x][<span class=\"number\">0</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\tson[x]=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x],y=A[i].to;i;i=A[i].next,y=A[i].to)&#123;</div><div class=\"line\">\t\tDFS(y);son[x]+=son[y];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=V.size()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;<span class=\"comment\">//从生产者开始做LCA，保证深度浅的在前被更新</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> Fa=<span class=\"number\">-1</span>,now=V[i];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=fhead[now],y=F[j].to;j;j=F[j].next,y=F[j].to)</div><div class=\"line\">\t\t\tFa=LCA(Fa,y);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Fa==<span class=\"number\">-1</span>)Fa=<span class=\"number\">0</span>;</div><div class=\"line\">\t\tAdd_edge(Fa,now);</div><div class=\"line\">\t\tDeep[now]=Deep[Fa]+<span class=\"number\">1</span>;</div><div class=\"line\">\t\tfa[now][<span class=\"number\">0</span>]=Fa;</div><div class=\"line\">\t\tElseInit(now);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tDFS(<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,son[i]<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tfreopen(<span class=\"string\">\"catas.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</div><div class=\"line\">    freopen(<span class=\"string\">\"catas.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\tInit();</div><div class=\"line\">\tWork();</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>灭绝树神马的据说WC2014上lyd讲了，不过我没有找到，有找到的孩子可以共享一下</p>\n"}