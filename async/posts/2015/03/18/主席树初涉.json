{"tags":[{"name":"主席树","permalink":"http://lzy-foenix.github.io/tags/主席树/","url":"\\async\\tags\\主席树.json","count":2}],"categories":[{"name":"数据结构","permalink":"http://lzy-foenix.github.io/categories/数据结构/","url":"\\async\\categories\\数据结构.json","count":18}],"url":"\\async\\posts\\2015\\03\\18\\主席树初涉.json","date":1426643480000,"path":{"year":2015,"month":3,"day":18,"name":"主席树初涉"},"title":"主席树初涉","permalink":"http://lzy-foenix.github.io/2015/03/18/主席树初涉/","content":"<hr>\n<a id=\"more\"></a>\n<p>蒟蒻新学的主席树，理一下头绪：</p>\n<h3 id=\"主席树：\"><a href=\"#主席树：\" class=\"headerlink\" title=\"主席树：\"></a>主席树：</h3><p>对于序列的每一个前缀建一棵以序列里的值为下标的线段树（所以要先离散化），记录该前缀序列里出现的值的次数；记离散后的标记为1~n;（下面值直接用1~n代替;）对于区间[x,y]的第k大的值，那么从root[x-1],root[y]开始，t=root[y].[1,mid]-root[x-1].[1,mid],t表示区间[x,y]内值在[1,mid]的个数先判断t是否大于K，如果t大于k,那么说明在区间[x,y]内存在[1,mid]的数的个数大于k,也就是第k大的值在[1,mid]中，否则在[mid+1,r]中.<br>这样我们依次同时从root[x-1],root[y]往下走,当l==r时,第k大的值就是离散后标记为l的值.</p>\n<p>如果每棵线段都建完整的话，n*(n&lt;&lt;2)肯定会mle，我们发现对于前缀[1,i]和前缀[1,i+1]的线段树，如果b[i+1]&lt;=mid (b[i+1]表示a[i+1]离散后的标记)那么线段树i和线段树i+1的左边是完全相同的，根本不需要在建，只需要用指针指一下就好；那么对于一棵新的线段树其实我们最多要建的节点数为log(n).nlog(n)的节点数还是可以忍受的.</p>\n<h3 id=\"相应的题目：\"><a href=\"#相应的题目：\" class=\"headerlink\" title=\"相应的题目：\"></a>相应的题目：</h3><p>以下都是模板题：<br><a href=\"http://cogs.yeefan.us/cogs/problem/problem.php?pid=930\" target=\"_blank\" rel=\"external\">cogs-930-找第k小数</a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc(i) T[(i)].lc</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc(i) T[(i)].rc</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N, M, A[MAXN], P[MAXN], B[MAXN], Size, Root[MAXN];</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> lc,rc,w;</div><div class=\"line\">&#125;T[MAXN * <span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">comp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;<span class=\"keyword\">return</span> A[i] &lt; A[j];&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;i, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\tT[++Size] = T[i]; i = Size;</div><div class=\"line\">\tT[i].w++;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(k &lt;= mid)Add(lc(i), l, mid, k);</div><div class=\"line\">\t<span class=\"keyword\">else</span> Add(rc(i), mid + <span class=\"number\">1</span>, r, k);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l == r)<span class=\"keyword\">return</span> l;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t = T[lc(j)].w - T[lc(i)].w;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(t &gt;= k)<span class=\"keyword\">return</span> Query(lc(i), lc(j), l, mid, k);</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Query(rc(i), rc(j), mid + <span class=\"number\">1</span>, r, k - t);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tfreopen(<span class=\"string\">\"kth.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfreopen(<span class=\"string\">\"kth.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;N, &amp;M);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= N; i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;A[i]),P[i]=i;</div><div class=\"line\">\tsort(P+<span class=\"number\">1</span>, P+N+<span class=\"number\">1</span>, comp);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= N; i++)B[P[i]]=i;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= N; i++)&#123;</div><div class=\"line\">\t\tRoot[i] = Root[i<span class=\"number\">-1</span>];</div><div class=\"line\">\t\tAdd(Root[i], <span class=\"number\">1</span>, N, B[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt;= M; i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x, y, k;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;x, &amp;y, &amp;k);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t=Query(Root[x<span class=\"number\">-1</span>], Root[y], <span class=\"number\">1</span>, N, k);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, A[P[t]]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://poj.org/problem?id=2104\" target=\"_blank\" rel=\"external\">poj-2104-K-th Number</a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc(i) T[(i)].lc</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc(i) T[(i)].rc</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N, M, A[MAXN], P[MAXN], B[MAXN], Root[MAXN], Size;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> lc, rc, w;</div><div class=\"line\">&#125;T[MAXN*<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">comp</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;<span class=\"keyword\">return</span> A[i] &lt; A[j];&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;i, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\tT[++Size] = T[i]; i=Size;</div><div class=\"line\">\tT[i].w++;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(mid &gt;= x)Add(lc(i), l, mid, x);</div><div class=\"line\">\t<span class=\"keyword\">else</span> Add(rc(i), mid+<span class=\"number\">1</span>, r, x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l == r)<span class=\"keyword\">return</span> l;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t = T[lc(j)].w - T[lc(i)].w;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mid = (l+r) &gt;&gt; <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(t &gt;= k)<span class=\"keyword\">return</span> Query(lc(i), lc(j), l, mid, k);</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Query(rc(i), rc(j), mid+<span class=\"number\">1</span>, r, k-t);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//freopen(\"1.in\",\"r\",stdin);</span></div><div class=\"line\">\t<span class=\"comment\">//freopen(\".out\",\"w\",stdout);</span></div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;N, &amp;M);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;A[i]), P[i]=i;</div><div class=\"line\">\tsort(P+<span class=\"number\">1</span>,P+N+<span class=\"number\">1</span>,comp);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)B[P[i]] = i;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</div><div class=\"line\">\t\tRoot[i] = Root[i<span class=\"number\">-1</span>];</div><div class=\"line\">\t\tAdd(Root[i], <span class=\"number\">1</span>, N, B[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= M; i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x, y, k;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;x, &amp;y, &amp;k);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t=Query(Root[x<span class=\"number\">-1</span>], Root[y], <span class=\"number\">1</span>, N, k);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,A[P[t]]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://poj.org/problem?id=2761\" target=\"_blank\" rel=\"external\">poj-2761-Feed the dogs</a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc(i) T[i].lc</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc(i) T[i].rc</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">100005</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> lc, rc, w;</div><div class=\"line\">&#125;T[MAXN*<span class=\"number\">20</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> N, M, A[MAXN], B[MAXN], P[MAXN], Root[MAXN], Size;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">comp</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;<span class=\"keyword\">return</span> A[i]&lt;A[j];&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;i,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\tT[++Size]=T[i]; i=Size;</div><div class=\"line\">\tT[i].w++;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(mid&gt;=x)Add(lc(i),l,mid,x);</div><div class=\"line\">\t<span class=\"keyword\">else</span> Add(rc(i),mid+<span class=\"number\">1</span>,r,x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span> l;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t=T[lc(j)].w-T[lc(i)].w;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(t&gt;=k)<span class=\"keyword\">return</span> Query(lc(i),lc(j),l,mid,k);</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> Query(rc(i),rc(j),mid+<span class=\"number\">1</span>,r,k-t);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//freopen(\"1.in\",\"r\",stdin);</span></div><div class=\"line\">\t<span class=\"comment\">//freopen(\".out\",\"w\",stdout);</span></div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N, &amp;M);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;A[i]),P[i]=i;</div><div class=\"line\">\tsort(P+<span class=\"number\">1</span>,P+N+<span class=\"number\">1</span>,comp);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)B[P[i]]=i;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\tRoot[i]=Root[i<span class=\"number\">-1</span>];</div><div class=\"line\">\t\tAdd(Root[i],<span class=\"number\">1</span>,N,B[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x,y,k;<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;x,&amp;y,&amp;k);</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t=Query(Root[x<span class=\"number\">-1</span>],Root[y],<span class=\"number\">1</span>,N,k);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,A[P[t]]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"}