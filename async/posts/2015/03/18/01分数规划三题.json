{"tags":[{"name":"01分数规划","permalink":"http://lzy-foenix.github.io/tags/01分数规划/","url":"\\async\\tags\\01分数规划.json","count":1}],"categories":[{"name":"数学","permalink":"http://lzy-foenix.github.io/categories/数学/","url":"\\async\\categories\\数学.json","count":24}],"url":"\\async\\posts\\2015\\03\\18\\01分数规划三题.json","date":1426667040000,"path":{"year":2015,"month":3,"day":18,"name":"01分数规划三题"},"title":"01分数规划三题","permalink":"http://lzy-foenix.github.io/2015/03/18/01分数规划三题/","content":"<hr>\n<a id=\"more\"></a>\n<p>对于01分数规划这种深明大义的东西，蒟蒻我终于搞懂了。<a href=\"http://www.cnblogs.com/perseawe/archive/2012/05/03/01fsgh.html\" target=\"_blank\" rel=\"external\">转载地址</a></p>\n<p>01分数规划我觉得重点就是那个F(x)函数，搞懂了那个就可以了，实现用二分法和Dinkelbach算法</p>\n<p>暂时只放上3道题目，都是模板题，很简单，分别是01分数规划，最优比例环和最优比率生成树</p>\n<h4 id=\"01分数规划\"><a href=\"#01分数规划\" class=\"headerlink\" title=\"01分数规划\"></a>01分数规划</h4><p><a href=\"http://poj.org/problem?id=2976\" target=\"_blank\" rel=\"external\">poj-2976-Dropping tests</a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-7</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">1005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,K;</div><div class=\"line\"><span class=\"keyword\">double</span> T[MAXN],A[MAXN],B[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;K)==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(N==<span class=\"number\">0</span>&amp;&amp;K==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i]);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;B[i]);</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> l=<span class=\"number\">0.0</span>,r=<span class=\"number\">1.0</span>,mid,sum;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(r-l&gt;eps)&#123;</div><div class=\"line\">\t\t\tsum=<span class=\"number\">0.0</span>;</div><div class=\"line\">\t\t\tmid=(l+r)*<span class=\"number\">1.0</span>/<span class=\"number\">2.0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)</div><div class=\"line\">\t\t\t\tT[i]=A[i]-mid*B[i];</div><div class=\"line\">\t\t\tsort(T+<span class=\"number\">1</span>,T+N+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=K+<span class=\"number\">1</span>;i&lt;=N;i++)</div><div class=\"line\">\t\t\t\tsum+=T[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(sum&gt;<span class=\"number\">0</span>)l=mid;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> r=mid;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%0.f\\n\"</span>,mid*<span class=\"number\">100</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"最优比例环\"><a href=\"#最优比例环\" class=\"headerlink\" title=\"最优比例环\"></a>最优比例环</h4><p><a href=\"http://poj.org/problem?id=3621\" target=\"_blank\" rel=\"external\">poj-3621-Sightseeing Cows</a><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-7</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">1005</span>,MAXM=<span class=\"number\">5005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,a,b,Len[MAXN];</div><div class=\"line\"><span class=\"keyword\">double</span> dis[MAXN],val[MAXN],c;</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[MAXN];</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">\t<span class=\"keyword\">double</span> cost;</div><div class=\"line\">&#125;A[MAXM&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"number\">1</span>,head[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">double</span> c)</span></span>&#123;</div><div class=\"line\">\tlen++; A[len].to=b; A[len].next=head[a]; A[len].cost=c; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">SPFA</span><span class=\"params\">(<span class=\"keyword\">double</span> mid)</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(Len,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(Len));</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\tQ.push(i); flag[i]=<span class=\"literal\">true</span>; Len[i]++; dis[i]=<span class=\"number\">0.0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop(); flag[tmp]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[tmp],y=A[i].to;i;i=A[i].next,y=A[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[y]&gt;dis[tmp]+mid*A[i].cost-val[tmp])&#123;</div><div class=\"line\">\t\t\t\tdis[y]=dis[tmp]+mid*A[i].cost-val[tmp];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!flag[y])&#123;</div><div class=\"line\">\t\t\t\t\tQ.push(y); flag[y]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t\tLen[y]++;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(Len[y]&gt;N)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;val[i]);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%lf\"</span>,&amp;a,&amp;b,&amp;c);</div><div class=\"line\">\t\tAdd_edge(a,b,c);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">double</span> l=<span class=\"number\">0.0</span>,r=<span class=\"number\">1000.0</span>,mid;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(r-l&gt;eps)&#123;</div><div class=\"line\">\t\tmid=(l+r)/<span class=\"number\">2.0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(SPFA(mid))l=mid;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> r=mid;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2f\\n\"</span>,mid);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"最优比率生成树\"><a href=\"#最优比率生成树\" class=\"headerlink\" title=\"最优比率生成树\"></a>最优比率生成树</h4><p><a href=\"http://poj.org/problem?id=2728\" target=\"_blank\" rel=\"external\">poj-2728-Desert King</a></p>\n<p>要用prim算法，Kruskal会被卡<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-8</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">1005</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> INF=<span class=\"number\">9999999.0</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N;</div><div class=\"line\"><span class=\"keyword\">double</span> X[MAXN],Y[MAXN],Z[MAXN],Cost[MAXN][MAXN],Dis[MAXN],Link[MAXN][MAXN];</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">Getdis</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((X[i]-X[j])*(X[i]-X[j])+(Y[i]-Y[j])*(Y[i]-Y[j]));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Judge</span><span class=\"params\">(<span class=\"keyword\">double</span> mid)</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(flag,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(flag));</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)Dis[i]=INF;</div><div class=\"line\">\tDis[<span class=\"number\">1</span>]=<span class=\"number\">0.0</span>;</div><div class=\"line\">\t<span class=\"keyword\">double</span> slen=<span class=\"number\">0.0</span>,mindis;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,k;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\tmindis=INF;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=N;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag[j] &amp;&amp; mindis&gt;Dis[j])mindis=Dis[j],k=j;</div><div class=\"line\">\t\tslen+=mindis; flag[k]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=N;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag[j] &amp;&amp; Cost[k][j]-mid*Link[k][j]&lt;Dis[j])Dis[j]=Cost[k][j]-mid*Link[k][j];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(slen&gt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N))&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(N==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf%lf\"</span>,&amp;X[i],&amp;Y[i],&amp;Z[i]);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=N;j++)&#123;</div><div class=\"line\">\t\t\t\tLink[i][j]=Link[j][i]=Getdis(i,j);</div><div class=\"line\">\t\t\t\tCost[i][j]=Cost[j][i]=<span class=\"built_in\">fabs</span>(Z[i]-Z[j]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">double</span> l=<span class=\"number\">0.0</span>,r=<span class=\"number\">1000.0</span>,mid;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(r-l&gt;eps)&#123;</div><div class=\"line\">\t\t\tmid=(l+r)/<span class=\"number\">2.0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Judge(mid))l=mid;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> r=mid;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3f\\n\"</span>,mid);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"}