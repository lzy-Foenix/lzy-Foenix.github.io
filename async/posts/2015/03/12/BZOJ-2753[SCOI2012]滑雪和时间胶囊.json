{"tags":[{"name":"MST","permalink":"http://lzy-foenix.github.io/tags/MST/","url":"\\async\\tags\\MST.json","count":1}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\12\\BZOJ-2753[SCOI2012]滑雪和时间胶囊.json","date":1426165325000,"path":{"year":2015,"month":3,"day":12,"name":"BZOJ-2753[SCOI2012]滑雪和时间胶囊"},"title":"BZOJ-2753[SCOI2012]滑雪和时间胶囊","permalink":"http://lzy-foenix.github.io/2015/03/12/BZOJ-2753[SCOI2012]滑雪和时间胶囊/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>一看到这个题，就知道是MST，再一看TMD是有向边，卧槽，最小树形图，等等，N&lt;=100000,M&lt;=1000000。卧槽，这是个吊。。。<br>还是从膜拜的题解，因为可以无限制的用时间胶囊，所以只要在原图中找到一个MST就可以了，但是这是有向的，而朱刘算法又会掉，所以我们找一些特殊的地方，比如说是高度，可以设想一下，我们在每一高度层做MST的话，就可以保证这一层的点可以互相到达，然后层与层之间也可以这样搞，然后就ok了。</p>\n<p>首先BFS找出所有可以到达的点，然后对边进行以高度为第一关键字，边权为第二关键字进行排序，再然后在这些点中做MST。注意第二问的答案会爆long long</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">100005</span>,MAXM=<span class=\"number\">1000005</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,h[MAXN],fa[MAXN],r1,r2;</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x;<span class=\"keyword\">char</span> ch;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(ch=getchar()));</div><div class=\"line\">\tx=ch<span class=\"number\">-48</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(ch=getchar()))x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,y,length;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node &amp;X)<span class=\"keyword\">const</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(h[y]==h[X.y])<span class=\"keyword\">return</span> length&lt;X.length;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> h[y]&gt;h[X.y];</div><div class=\"line\">\t&#125;<span class=\"comment\">//按照高度排序 </span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\tx=Get(); y=Get(); length=Get();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(h[x]&lt;h[y])swap(x,y);<span class=\"comment\">//保证边的单向性，由高的地方练向低的地方</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;Edge[MAXM];</div><div class=\"line\"><span class=\"keyword\">struct</span> NODE&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">&#125;A[MAXM&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> len,head[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++; A[len].to=b; A[len].next=head[a]; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BFS</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(<span class=\"number\">1</span>);</div><div class=\"line\">\tflag[<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[tmp],y=A[i].to;i;i=A[i].next,y=A[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag[y])&#123;</div><div class=\"line\">\t\t\t\tflag[y]=<span class=\"literal\">true</span>; res++;</div><div class=\"line\">\t\t\t\tQ.push(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x!=fa[x])<span class=\"keyword\">return</span> fa[x]=Find(fa[x]);</div><div class=\"line\">\t<span class=\"keyword\">return</span> fa[x];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Solve</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\tsort(Edge+<span class=\"number\">1</span>,Edge+M+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)fa[i]=i;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag[Edge[i].x] || !flag[Edge[i].y])<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\tr1=Find(Edge[i].x),r2=Find(Edge[i].y);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(r1!=r2)&#123;</div><div class=\"line\">\t\t\tfa[r1]=r2;</div><div class=\"line\">\t\t\tres+=Edge[i].length;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tN=Get();M=Get();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)h[i]=Get();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\tEdge[i].Read();</div><div class=\"line\">\t\tAdd_edge(Edge[i].x,Edge[i].y);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(h[Edge[i].x]==h[Edge[i].y])</div><div class=\"line\">\t\t\tAdd_edge(Edge[i].y,Edge[i].x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,BFS());</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,Solve());</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}