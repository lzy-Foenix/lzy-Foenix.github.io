{"tags":[{"name":"最小割","permalink":"http://lzy-foenix.github.io/tags/最小割/","url":"\\async\\tags\\最小割.json","count":2}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\23\\BZOJ-3258-秘密任务.json","date":1427113024000,"path":{"year":2015,"month":3,"day":23,"name":"BZOJ-3258-秘密任务"},"title":"BZOJ-3258-秘密任务","permalink":"http://lzy-foenix.github.io/2015/03/23/BZOJ-3258-秘密任务/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>题目是让求是否多解，并且求最小花费。首先一想的话可以意会到时最小割，然后我们就往这个方向去想，会发现，有个最短路的限制，那么我们就求出最短路网，然后在这几个路径上做最小割，最后判断是不是唯一解。</p>\n<p>两遍SPFA找出最短路网(其实第二遍不算是SPFA，而是宽搜)，然后用这个最短路网构建新图，在新图上跑最小割，然后就是判断是否是唯一解：首先我们先从1和N分别拓展，看那些点是与1相连，哪些点是与N相连，分别标记1和2，我们先定义一个变量cnt=0，然后我们枚举与1相连的点，假设有一条边的两端分别是1标记和2标记，那么看这条边的两点的权值是不是相同，如果相同的话就是有多解(可以在这条道路的两个端点的任意一个设立检查站，且费用一样)，不相同的话cnt+=min(A[x],A[y])，然后最后判断cnt是否等于刚刚求出的最下割，如果相同的话，就证明最小割集是唯一的。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">405</span>,MAXM=<span class=\"number\">4005</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> LL INF=<span class=\"number\">10000000000000L</span>L;</div><div class=\"line\">LL T,N,M,A[MAXN],Dis[MAXN],Ans;</div><div class=\"line\"><span class=\"keyword\">struct</span> node1&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">\tLL flow;</div><div class=\"line\">&#125;Edge1[MAXM&lt;&lt;<span class=\"number\">1</span>],Edge2[MAXM&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\">LL len1=<span class=\"number\">1</span>,len2=<span class=\"number\">1</span>,head1[MAXN],head2[MAXN];</div><div class=\"line\">LL my_dis[MAXN],vis[MAXN];</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge1</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,LL c)</span></span>&#123;</div><div class=\"line\">\tlen1++; Edge1[len1].to=b; Edge1[len1].flow=c; Edge1[len1].next=head1[a]; head1[a]=len1;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge2</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,LL c)</span></span>&#123;</div><div class=\"line\">\tlen2++; Edge2[len2].to=b; Edge2[len2].flow=c; Edge2[len2].next=head2[a]; head2[a]=len2;</div><div class=\"line\">\tlen2++; Edge2[len2].to=a; Edge2[len2].flow=<span class=\"number\">0</span>; Edge2[len2].next=head2[b]; head2[b]=len2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SPFA1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)Dis[i]=INF;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(flag,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(flag));</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(<span class=\"number\">1</span>); Dis[<span class=\"number\">1</span>]=<span class=\"number\">0</span>; flag[<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop(); flag[tmp]=<span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head1[tmp],y=Edge1[i].to;i;i=Edge1[i].next,y=Edge1[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Dis[y]&gt;Dis[tmp]+Edge1[i].flow)&#123;</div><div class=\"line\">\t\t\t\tDis[y]=Dis[tmp]+Edge1[i].flow;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!flag[y])&#123;flag[y]=<span class=\"literal\">true</span>; Q.push(y);&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SPFA2</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(N); flag[N]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head1[tmp],y=Edge1[i].to;i;i=Edge1[i].next,y=Edge1[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Dis[y]+Edge1[i].flow==Dis[tmp])&#123;</div><div class=\"line\">\t\t\t\tAdd_edge2(y,tmp,min(A[y],A[tmp]));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!flag[y])&#123;flag[y]=<span class=\"literal\">true</span>; Q.push(y);&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">BFS</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(my_dis,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span> my_dis);</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(<span class=\"number\">1</span>); my_dis[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head2[tmp],y=Edge2[i].to;i;i=Edge2[i].next,y=Edge2[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(my_dis[y]==<span class=\"number\">-1</span> &amp;&amp; Edge2[i].flow)&#123;</div><div class=\"line\">\t\t\t\tmy_dis[y]=my_dis[tmp]+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tQ.push(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> my_dis[N]==<span class=\"number\">-1</span>? <span class=\"number\">0</span>:<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x,LL flow)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x==N || flow==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> flow;</div><div class=\"line\">\tLL tmp=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head2[x],y=Edge2[i].to;i;i=Edge2[i].next,y=Edge2[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(my_dis[y]==my_dis[x]+<span class=\"number\">1</span> &amp;&amp; Edge2[i].flow)&#123;</div><div class=\"line\">\t\t\tLL k=DFS(y,min(flow,Edge2[i].flow));</div><div class=\"line\">\t\t\ttmp+=k; flow-=k; Edge2[i].flow-=k; Edge2[i^<span class=\"number\">1</span>].flow+=k;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flow)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dinic</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(BFS())Ans+=DFS(<span class=\"number\">1</span>,INF);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">Calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(y==N)<span class=\"keyword\">return</span> A[x];</div><div class=\"line\">\t<span class=\"keyword\">return</span> min(A[x],A[y]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Judge</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> vis);</div><div class=\"line\">\tQ.push(<span class=\"number\">1</span>);vis[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head2[tmp],y=Edge2[i].to;i;i=Edge2[i].next,y=Edge2[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!Edge2[i].flow)<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[y])vis[y]=<span class=\"number\">1</span>,Q.push(y);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tQ.push(N);vis[N]=<span class=\"number\">2</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head2[tmp],y=Edge2[i].to;i;i=Edge2[i].next,y=Edge2[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!Edge2[i^<span class=\"number\">1</span>].flow)<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[y])vis[y]=<span class=\"number\">2</span>,Q.push(y);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tLL cnt=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(vis[i]==<span class=\"number\">1</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=head2[i],y=Edge2[j].to;j;j=Edge2[j].next,y=Edge2[j].to)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!(j&amp;<span class=\"number\">1</span>) &amp;&amp; vis[y]==<span class=\"number\">2</span>)</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(A[y]==A[i])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> cnt+=Calc(i,y);</div><div class=\"line\">\t<span class=\"keyword\">return</span> cnt==Ans;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(head1,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(head1));<span class=\"built_in\">memset</span>(head2,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(head2));</div><div class=\"line\">\tlen1=<span class=\"number\">0</span>;len2=<span class=\"number\">1</span>; Ans=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;T);</div><div class=\"line\">\t<span class=\"keyword\">while</span>(T--)&#123;</div><div class=\"line\">\t\tClear();</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;N,&amp;M);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;A[i]); A[N]=INF;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t\tLL a,b,c;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld\"</span>,&amp;a,&amp;b,&amp;c);</div><div class=\"line\">\t\t\tAdd_edge1(a,b,c);Add_edge1(b,a,c);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSPFA1();</div><div class=\"line\">\t\tSPFA2();</div><div class=\"line\">\t\tDinic();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Judge())<span class=\"built_in\">printf</span>(<span class=\"string\">\"Yes %lld\\n\"</span>,Ans);</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"No %lld\\n\"</span>,Ans);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}