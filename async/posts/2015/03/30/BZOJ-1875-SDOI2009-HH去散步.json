{"tags":[{"name":"矩阵快速幂","permalink":"http://lzy-foenix.github.io/tags/矩阵快速幂/","url":"\\async\\tags\\矩阵快速幂.json","count":3}],"categories":[{"name":"矩阵","permalink":"http://lzy-foenix.github.io/categories/矩阵/","url":"\\async\\categories\\矩阵.json","count":3}],"url":"\\async\\posts\\2015\\03\\30\\BZOJ-1875-SDOI2009-HH去散步.json","date":1427687838000,"path":{"year":2015,"month":3,"day":30,"name":"BZOJ-1875-SDOI2009-HH去散步"},"title":"BZOJ-1875[SDOI2009]HH去散步","permalink":"http://lzy-foenix.github.io/2015/03/30/BZOJ-1875-SDOI2009-HH去散步/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>一道裸地矩阵快速幂的题，但是坑爹的题目中说走过的路不能立刻走回来，那么也就是说，如果我们我还是跟以前一样的用点来构建矩阵的话就会跪的很惨。。。所以大神说了，要用边来构建矩阵</p>\n<p>初始化原始矩阵，A.a[1][i]++，i是从A出发的所有边的编号，而这里的1是假想的起点，加1表示从假象起点可以到达这里。构造矩阵的时候如果一条边的to和一条边的from相同，那么就++，注意不能走回头路，也就是说当i==(j^1)的时候要跳过去。之后求$\\sum_A.a[1][i]$,i是<strong>连向B</strong>的边</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod=<span class=\"number\">45989</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,T,A,B;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next,from;</div><div class=\"line\">&#125;Edge[<span class=\"number\">200</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"number\">1</span>,head[<span class=\"number\">25</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].from=a; Edge[len].to=b; Edge[len].next=head[a]; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">struct</span> Matrix&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">125</span>][<span class=\"number\">125</span>];</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">memset</span>(a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(a));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)a[i][i]=<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tMatrix <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Matrix &amp;A)<span class=\"keyword\">const</span>&#123;</div><div class=\"line\">\t\tMatrix res; res.init();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=len;k++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)</div><div class=\"line\">\t\t\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=len;j++)</div><div class=\"line\">\t\t\t        res.a[i][j]+=(a[i][k]*A.a[k][j])%mod,res.a[i][j]%=mod;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=len;i++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=len;j++)<span class=\"built_in\">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;K,Ans;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[A];i;i=Edge[i].next)</div><div class=\"line\">\t\tAns.a[<span class=\"number\">1</span>][i]++;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=len;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;=len;j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==j || i==(j^<span class=\"number\">1</span>))<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Edge[i].to == Edge[j].from)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!K.a[i][j])K.a[i][j]++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Quick_muti</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tMatrix ans; ans.init(); ans.build();</div><div class=\"line\">\t<span class=\"keyword\">while</span>(T)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(T &amp; <span class=\"number\">1</span>)ans=ans*K;</div><div class=\"line\">\t\tK=K*K;</div><div class=\"line\">\t\tT&gt;&gt;=<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tAns=Ans*ans;</div><div class=\"line\">\t<span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[B];i;i=Edge[i].next)</div><div class=\"line\">\t\ttmp+=Ans.a[<span class=\"number\">1</span>][i^<span class=\"number\">1</span>],tmp%=mod;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,(tmp+mod)%mod);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d\"</span>,&amp;N,&amp;M,&amp;T,&amp;A,&amp;B);</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,y; K.init();T--;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;x,&amp;y);</div><div class=\"line\">\t\tAdd_edge(x,y); Add_edge(y,x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tBuild();</div><div class=\"line\">\tQuick_muti();</div><div class=\"line\">    fclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">    fclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}