{"tags":[{"name":"数论","permalink":"http://lzy-foenix.github.io/tags/数论/","url":"\\async\\tags\\数论.json","count":8}],"categories":[{"name":"数学","permalink":"http://lzy-foenix.github.io/categories/数学/","url":"\\async\\categories\\数学.json","count":24}],"url":"\\async\\posts\\2015\\03\\28\\初等数论.json","date":1427495723000,"path":{"year":2015,"month":3,"day":28,"name":"初等数论"},"title":"初等数论","permalink":"http://lzy-foenix.github.io/2015/03/28/初等数论/","content":"<hr>\n<a id=\"more\"></a>\n<blockquote>\n<p>拓展欧几里得<br>逆元<br>CRT<br>原根<br>Lucas定理<br>Miller_Rabin 素数测试<br>Pollard rhos</p>\n</blockquote>\n<h2 id=\"拓展欧几里得\"><a href=\"#拓展欧几里得\" class=\"headerlink\" title=\"拓展欧几里得:\"></a>拓展欧几里得:</h2><p>拓展欧几里得是解决一类$a\\cdot x+b\\cdot y=m$的问题，求x的最小正整数解。<br>首先我们可以得知$gcd(a,b)|a,gcd(a,b)|b$<br>所以$gcd(a,b)|a\\cdot x,gcd(a,b)|b\\cdot y$,继而$gcd(a,b)|m$</p>\n<h4 id=\"第一种情况：\"><a href=\"#第一种情况：\" class=\"headerlink\" title=\"第一种情况：\"></a>第一种情况：</h4><p>当b==0的时候,x=1,y=0;</p>\n<h4 id=\"第二种情况：\"><a href=\"#第二种情况：\" class=\"headerlink\" title=\"第二种情况：\"></a>第二种情况：</h4><p>所以我们可以求$a\\cdot x+b\\cdot y=gcd(a,b)$的答案<br>我们假设$a\\cdot x1+b\\cdot y1=gcd(a,b)$因为$gcd(a,b)=gcd(b,a \\mod b)$<br>所以可以得出$a\\cdot x1+b\\cdot y1=b\\cdot x2+(a-\\lfloor a/b \\rfloor\\cdot b)\\cdot y2$<br>所以整理得$x1=y2,y1=x2-\\lfloor a/b \\rfloor*y2$由此可以递归求解。<br><a href=\"http://cogs.yeefan.us/cogs/problem/problem.php?pid=1265\" target=\"_blank\" rel=\"external\">cogs-1265-同余方程</a></p>\n<p>###代码：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\">LL A,B,x,y;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Exgcd</span><span class=\"params\">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(b==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        x=<span class=\"number\">1</span>; y=<span class=\"number\">0</span>; <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Exgcd(b,a%b,x,y);</div><div class=\"line\">    <span class=\"keyword\">int</span> t=x; x=y; y=t-(a/b)*y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld\"</span>,&amp;A,&amp;B);</div><div class=\"line\">    Exgcd(A,B,x,y);</div><div class=\"line\">    x=(x+B)%B;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,x);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"逆元\"><a href=\"#逆元\" class=\"headerlink\" title=\"逆元\"></a>逆元</h2><h4 id=\"逆元是个什么东西\"><a href=\"#逆元是个什么东西\" class=\"headerlink\" title=\"逆元是个什么东西\"></a>逆元是个什么东西</h4><p>就是$a\\cdot b\\equiv 1(\\mod n)$,我们称a是b模n意义下的逆元。</p>\n<h4 id=\"逆元有什么用\"><a href=\"#逆元有什么用\" class=\"headerlink\" title=\"逆元有什么用\"></a>逆元有什么用</h4><p>好多用途。。。<br>当让你求$(a/b)\\mod n$且a非常大，这时候我们可以求b在模n意义下的逆元，然后最后求$(a\\cdot b^{-1})\\mod n$<br>CRT中也会用到,组合数也可能会用到。<br>这里说两种算逆元的方法：</p>\n<h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>由费马小定理得，当p是素数的时候，$a^{p}\\equiv 1(\\mod p)$所以$a^{-1}=a^{p-2}\\mod p$当p不是素数的时候$a^{-1}=a^{\\phi(p)-1}\\mod p$</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>上面那是单个求的方法，下面介绍线性求逆元<br>当p是素数的时候，用一种基于$a+b\\cdot i=p$的方法。<br>求$inv[i]$的时候，令$a=p/i,b=p\\mod i$<br>可以推知：<br>$a\\cdot i=-b\\mod p$<br>$a=-b\\cdot i^{-1}\\mod p$<br>$-a\\cdot b^{-1} = i^{-1}\\mod p$<br>所以$inv[i]=p-a\\cdot inv[b]\\mod p$</p>\n<h2 id=\"Chinese-Remainder-Theorem-CRT\"><a href=\"#Chinese-Remainder-Theorem-CRT\" class=\"headerlink\" title=\"Chinese Remainder Theorem(CRT)\"></a>Chinese Remainder Theorem(CRT)</h2><p>中国剩余定理又叫孙子定理，用于解决一元线性同余方程组</p>\n<p>一元线性同余方程组问题最早可见于中国南北朝时期（公元5世纪）的数学著作《孙子算经》卷下第二十六题，叫做“物不知数”问题，原文如下：<br>有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？<br>即，一个整数除以三余二，除以五余三，除以七余二，求这个整数。《孙子算经》中首次提到了同余方程组问题，以及以上具体问题的解法，因此在中文数学文献中也会将中国剩余定理称为孙子定理。<br>宋朝数学家秦九韶于1247年《数书九章》卷一、二《大衍类》对“物不知数”问题做出了完整系统的解答。明朝数学家程大位将解法编成易于上口的《孙子歌诀》：三人同行七十希，五树梅花廿一支，七子团圆正半月，除百零五使得知这个歌诀给出了模数为3、5、7时候的同余方程的秦九韶解法。意思是：将除以3得到的余数乘以70，将除以5得到的余数乘以21，将除以7得到的余数乘以15，全部加起来后除以105，得到的余数就是答案。比如说在以上的物不知数问题里面，按歌诀求出的结果就是23.</p>\n<p>那么简化成同余方程就是<br>$$x\\equiv a1(\\mod b1)$$<br>$$x\\equiv a2(\\mod b2)$$<br>$$x\\equiv a3(\\mod b3)$$</p>\n<p>那么我们怎么解决这个问题呢？<br>还有就是这个方程一定有解吗？</p>\n<p>如果$a1\\mod gcd(b1,b2)!=a2\\mod gcd(b1,b2)$那么就是无解的</p>\n<p>我们可以假设$x=a1+k1\\cdot b1$且$x=a2+k2\\cdot b2$<br>$$a1+k1\\cdot b1=a2+k2\\cdot b2$$<br>$$k1\\cdot b1\\equiv (a2-a1)\\mod b2$$<br>$$k1\\equiv (a2-a1)\\cdot b1^{-1}\\mod b2$$<br>我们要求k1最小，那么x就最小，所以$k1=(a2-a1)\\cdot b1^{-1}$回代入原式，得出x。<br>但是有一个前提就是b1,b2是互质的，如果不互质，就让b1,b2分别除gcd(b1,b2)</p>\n<p>具体的解法：<br>令$M=b1\\cdot b2\\cdot b3\\cdot \\cdot \\cdot bn$<br>令$Mi=M/bi$,令$Ki$为$Mi$在模$bi$意义下的逆元<br>那么$Ans=(\\sum_{i=1}^{n} ai\\cdot Mi\\cdot Ki)\\mod M$<br>就是最小的X的解</p>\n<h2 id=\"原根\"><a href=\"#原根\" class=\"headerlink\" title=\"原根\"></a>原根</h2><p>对于一个数a，使得任意1 &lt;= d &lt; p-1且$a^{d}\\not \\equiv 1(\\mod p)$那么称a是p的原根，由于原根一般都很小，所以枚举就好了，还有一种判断方法就是枚举P-1的大于1因子d如果有$a^{\\frac{p-1}{d}}\\equiv (1\\mod P)$，那么a不是原根。</p>\n<h2 id=\"Lucas定理，组合数取模\"><a href=\"#Lucas定理，组合数取模\" class=\"headerlink\" title=\"Lucas定理，组合数取模\"></a>Lucas定理，组合数取模</h2><p>求$\\lgroup_{n}^{m}\\rgroup\\mod P$ 在n，m &lt;= $10^{9}$，p &lt;= $10^{9}$且p是素数的时候有用，如果p不是素数，就要用到CRT。<br>$\\lgroup_{n}^{m}\\rgroup$ 奇数，当且仅当$n \\&amp; m=m$<br>$\\lgroup_{n}^{m}\\rgroup \\mod 2$<br>$=\\lgroup_{n\\mod 2}^{m\\mod 2}\\rgroup\\cdot  \\lgroup_{n/2 \\mod 2}^{m/2 \\mod 2}\\rgroup\\cdot …\\cdot \\lgroup_{n/2^{k}\\mod 2}^{m/2^{k}\\mod 2}\\rgroup$<br>然后递归处理</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\">LL n,m,p;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">quick_mod</span><span class=\"params\">(LL a,LL b)</span></span>&#123;</div><div class=\"line\">    LL ans=<span class=\"number\">1</span>;</div><div class=\"line\">    a%=p;</div><div class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)&#123;</div><div class=\"line\">            ans=ans*a%p;</div><div class=\"line\">            b--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        b&gt;&gt;=<span class=\"number\">1</span>;</div><div class=\"line\">        a=a*a%p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">C</span><span class=\"params\">(LL n,LL m)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(m&gt;n)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    LL ans=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</div><div class=\"line\">        LL a=(n+i-m)%p;</div><div class=\"line\">        LL b=i%p;</div><div class=\"line\">        ans=ans*(a*quick_mod(b,p<span class=\"number\">-2</span>)%p)%p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">Lucas</span><span class=\"params\">(LL n,LL m)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(m==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> C(n%p,m%p)*Lucas(n/p,m/p)%p;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> T;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld%lld%lld\"</span>,&amp;n,&amp;m,&amp;p);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,Lucas(n,m));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Rabin-Miller素数测试\"><a href=\"#Rabin-Miller素数测试\" class=\"headerlink\" title=\"Rabin_Miller素数测试\"></a>Rabin_Miller素数测试</h2><p>转载自<a href=\"http://blog.csdn.net/a601025382s/article/details/12168043\" target=\"_blank\" rel=\"external\">请戳我</a><br>Miller-Rabin 算法(基于费马小定理/Fermat 定理)<br>作用：通过概率的方式判断素数。有误判概率，通过多次判断可以使误判概率控制在很小范围。<br>理论基础：如果n是一个奇素数， 将n-1表示成$2^s\\cdot r$的形式(r是奇 数)，a 是和n互素的任何整数， 那么$a^{r}\\equiv 1(\\mod n)$或者对某个$j(0 ≤ j ≤ s - 1，j∈Z)$ 等式 $a^{2^{j}\\cdot r}\\equiv 1(\\mod n)$成立。 这个理论是通过一个事实经由Fermat定理推导而来： n是一个奇素数，则方程$x2\\equiv 1\\mod n$只有±1两个解。</p>\n<h3 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL __int64</span></div><div class=\"line\"><span class=\"keyword\">const</span> LL NUM=<span class=\"number\">3</span>;<span class=\"comment\">//判断次数，每次误判概率1/2.NUM次误判概率为2^(-num)</span></div><div class=\"line\"><span class=\"function\">LL <span class=\"title\">check</span><span class=\"params\">(LL a,LL n,LL x,LL t)</span></span>&#123;<span class=\"comment\">//合数返回true</span></div><div class=\"line\">    LL ret=pow_mod(a,x,n);<span class=\"comment\">//a^x%n</span></div><div class=\"line\">    LL last=ret;</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i=<span class=\"number\">1</span>;i&lt;=t;i++)&#123;</div><div class=\"line\">        ret=mult_mod(ret,ret,n);<span class=\"comment\">//ret^2%n，64位乘法，需要用二进制乘法，类似快速幂。</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(ret==<span class=\"number\">1</span> &amp;&amp; last!=<span class=\"number\">1</span> &amp;&amp;last!=n<span class=\"number\">-1</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        last=ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ret!=<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Miller_Rabin</span><span class=\"params\">(LL n)</span></span>&#123;<span class=\"comment\">//Miller_Rabin算法,素数返回true</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>((n&amp;<span class=\"number\">1</span>)==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    LL x=n<span class=\"number\">-1</span>;</div><div class=\"line\">    LL t=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>((x&amp;<span class=\"number\">1</span>)==<span class=\"number\">0</span>)&#123;x&gt;&gt;=<span class=\"number\">1</span>;t++;&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>(LL i=<span class=\"number\">0</span>;i&lt;NUM;i++)&#123;</div><div class=\"line\">        LL a=rand()%(n<span class=\"number\">-1</span>)+<span class=\"number\">1</span>;<span class=\"comment\">//生成1~n-1的随机数</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(check(a,n,x,t))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Pollard-rhos\"><a href=\"#Pollard-rhos\" class=\"headerlink\" title=\"Pollard rhos\"></a>Pollard rhos</h2><p>作用：求解一个数的因子。<br>原理：设n为待分解的大整数，用某种方法生成a和b，计算$p=gcd(a-b,n)$,直到p不为1或a,b出现循环时为止，若p=n，则说明n是一个素数，否则p为n的一个约数。<br>算法步骤：选取一个小的随机数x1，迭代生成$x[i] = x[i-1]^2+c$，一般取c=1，若序列出现循环则退出，计算$p=gcd(x[i-1]-x[i],n)$，若p=1则返回上一步继续迭代，否则跳出迭代过程。若p=n，则n为素数，否则p为n的一个约数，并递归分解p和n/p。<br>可以在$θ（sqrt(p)）$的期望时间内找到n的一个小因子p。但对于因子很少，因子值很大的大整数n，该方法依然不是很有效。<br>为了减少反复的次数，算法做了一些改进。该算法用数对(x0,x0)开始，并且用$x(i+1)=f(xi)$，迭代计算(x1,x2),(x2,x4),(x3,x6)…(xi,x2i)。在每一次迭代中，我们都应用上述函数式运算(从第二步)第一次计算数对中的第一个元素，第二次计算数对中的第二个元素。</p>\n<h3 id=\"代码：-2\"><a href=\"#代码：-2\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">LL <span class=\"title\">Pollard_rho</span><span class=\"params\">(LL n,LL c)</span></span>&#123;<span class=\"comment\">//Pollard_rho算法，找出n的因子</span></div><div class=\"line\">    LL i=<span class=\"number\">1</span>,j,k=<span class=\"number\">2</span>,x,y,d,p;</div><div class=\"line\">    x=rand()%n;</div><div class=\"line\">    y=x;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">        i++;</div><div class=\"line\">        x=(mul_mod(x,x,n)+c)%n;</div><div class=\"line\">        <span class=\"keyword\">if</span>(y==x)<span class=\"keyword\">return</span> n;</div><div class=\"line\">        <span class=\"keyword\">if</span>(y&gt;x)p=y-x;</div><div class=\"line\">        <span class=\"keyword\">else</span> p=x-y;</div><div class=\"line\">        d=gcd(p,n);</div><div class=\"line\">        <span class=\"keyword\">if</span>(d!=<span class=\"number\">1</span>&amp;&amp;d!=n)<span class=\"keyword\">return</span> d;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i==k)&#123;</div><div class=\"line\">            y=x;</div><div class=\"line\">            k+=k;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"}