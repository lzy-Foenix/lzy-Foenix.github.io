{"tags":[{"name":"最长链","permalink":"http://lzy-foenix.github.io/tags/最长链/","url":"\\async\\tags\\最长链.json","count":1}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\13\\BZOJ-2657[ZJOI2012]旅游.json","date":1426251845000,"path":{"year":2015,"month":3,"day":13,"name":"BZOJ-2657[ZJOI2012]旅游"},"title":"BZOJ-2657[ZJOI2012]旅游","permalink":"http://lzy-foenix.github.io/2015/03/13/BZOJ-2657[ZJOI2012]旅游/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>难得的水题，把两个相邻的城市之间连接一条边，然后两边BFS求最长链，就OK了。两个城市相邻的话就需要他们有一条公用边，对于一个城市的3个顶点，只需要找是否曾近出现过这条边，用map来记录。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">200005</span>;</div><div class=\"line\"><span class=\"comment\">//每条边对应的两个城市连接一条边，也就是说存在两个城市相邻当且仅当这两个城市中每个城市的三个顶点中有两个相邻就可以 </span></div><div class=\"line\"><span class=\"keyword\">int</span> N,a,b,c,len,head[MAXN],st,dis[MAXN];</div><div class=\"line\"><span class=\"keyword\">bool</span> exist[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x; <span class=\"keyword\">char</span> ch;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!<span class=\"built_in\">isdigit</span>(ch=getchar()));</div><div class=\"line\">\tx=ch<span class=\"number\">-48</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(ch=getchar()))x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next,cost;</div><div class=\"line\">&#125;City[MAXN&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</div><div class=\"line\">\tlen++; City[len].next=head[a]; City[len].cost=c; City[len].to=b; head[a]=len;</div><div class=\"line\">\tlen++; City[len].next=head[b]; City[len].cost=c; City[len].to=a; head[b]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">struct</span> NODE&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,y;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> NODE X)<span class=\"keyword\">const</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(x==X.x)<span class=\"keyword\">return</span> y&lt;X.y;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x&lt;X.x;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;e;</div><div class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;NODE,<span class=\"keyword\">int</span>&gt;M;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;NODE,<span class=\"keyword\">int</span>&gt;::iterator It;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Judge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> pi)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x&gt;y)swap(x,y);</div><div class=\"line\">\te.x=x; e.y=y;</div><div class=\"line\">\tIt=M.find(e);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(It!=M.end())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t=(*It).second;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(t!=pi)&#123;</div><div class=\"line\">\t\t\tAdd_edge(t,pi,<span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> M.insert(pair&lt;NODE,<span class=\"keyword\">int</span>&gt;(e,pi));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-2</span>;i++)&#123;</div><div class=\"line\">\t\ta=Get(); b=Get(); c=Get();</div><div class=\"line\">\t\tJudge(a,b,i); Judge(a,c,i); Judge(b,c,i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS1</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())Q.pop(); <span class=\"built_in\">memset</span>(exist,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(exist));</div><div class=\"line\">\tQ.push(<span class=\"number\">1</span>); exist[<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\tst=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[st],y=City[i].to;i;i=City[i].next,y=City[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!exist[y])Q.push(y),exist[y]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS2</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())Q.pop(); <span class=\"built_in\">memset</span>(exist,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(exist));</div><div class=\"line\">\tQ.push(st); dis[st]=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> st=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[st],y=City[i].to;i;i=City[i].next,y=City[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!exist[y])&#123;</div><div class=\"line\">\t\t\t\tQ.push(y);exist[y]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\tdis[y]=dis[st]+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N<span class=\"number\">-2</span>;i++)k=k&gt;dis[i]? k:dis[i];</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,k);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tInit();</div><div class=\"line\">\tBFS1();</div><div class=\"line\">\tBFS2();</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}