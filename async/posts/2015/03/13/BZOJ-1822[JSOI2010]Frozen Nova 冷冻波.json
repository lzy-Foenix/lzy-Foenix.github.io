{"tags":[{"name":"最大流","permalink":"http://lzy-foenix.github.io/tags/最大流/","url":"\\async\\tags\\最大流.json","count":3}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\13\\BZOJ-1822[JSOI2010]Frozen Nova 冷冻波.json","date":1426251905000,"path":{"year":2015,"month":3,"day":13,"name":"BZOJ-1822[JSOI2010]Frozen Nova 冷冻波"},"title":"BZOJ-1822[JSOI2010]Frozen Nova 冷冻波","permalink":"http://lzy-foenix.github.io/2015/03/13/BZOJ-1822[JSOI2010]Frozen Nova 冷冻波/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><p>二分加最大流加计算几何</p>\n<p>这道题要做吐了，虽然思想很简单，但是确实是有很多细节啊（ps：本蒟蒻某天还因为做这道题太过投入差点被锁在机房里），一开始想到了最小费用，但是后来在写的过程中发现如果考虑最小费用的话，那么所有的巫妖就不能同时发送冷冻波。所以要二分最大流，然后判断在此时间内时候能够灭杀这些精灵。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">29</span>);</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,K,Ans;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,y,r,t;</div><div class=\"line\">&#125;yao[<span class=\"number\">205</span>],guai[<span class=\"number\">205</span>],Tree[<span class=\"number\">205</span>];</div><div class=\"line\"><span class=\"keyword\">struct</span> NODE&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next,flow;</div><div class=\"line\">&#125;A[<span class=\"number\">400005</span>&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> Map[<span class=\"number\">205</span>][<span class=\"number\">205</span>],st,en,len,head[<span class=\"number\">505</span>],dis[<span class=\"number\">505</span>],flag[<span class=\"number\">205</span>],cur[<span class=\"number\">505</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</div><div class=\"line\">\tlen++; A[len].to=b; A[len].next=head[a]; A[len].flow=c; head[a]=len;</div><div class=\"line\">\tlen++; A[len].to=a; A[len].next=head[b]; A[len].flow=<span class=\"number\">0</span>; head[b]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*******/</span></div><div class=\"line\"><span class=\"keyword\">struct</span> L&#123;</div><div class=\"line\">\tnode a,b;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">ABS</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x&lt;<span class=\"number\">0</span>? (-x):(x);&#125;</div><div class=\"line\"><span class=\"keyword\">inline</span> node <span class=\"keyword\">operator</span>-(node a,node b)&#123;node t;t.x=a.x-b.x;t.y=a.y-b.y;<span class=\"keyword\">return</span> t;&#125;</div><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"keyword\">operator</span>*(node a,node b)&#123;<span class=\"keyword\">return</span> a.x*b.y-a.y*b.x;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">dot</span><span class=\"params\">(node a,node b)</span></span>&#123;<span class=\"keyword\">return</span> a.x*b.x+a.y*b.y;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">Dis</span><span class=\"params\">(node a,node b)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">Dis</span><span class=\"params\">(L l,node p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(dot(l.a-p,l.b-p)&gt;<span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> min(Dis(l.a,p),Dis(l.b,p));</div><div class=\"line\">\t<span class=\"keyword\">return</span> ABS((p-l.a)*(l.b-l.a)/Dis(l.a,l.b));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Judge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"comment\">//巫妖x与精灵y</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(Dis(yao[x],guai[y])&gt;yao[x].r)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=K;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Dis((L)&#123;yao[x],guai[y]&#125;,Tree[i])&lt;Tree[i].r)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*******/</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">void getline(node p1,node p2,double &amp;a,double &amp;b,double &amp;c)&#123;</div><div class=\"line\">\ta=p2.y-p1.y; b=p1.x-p2.x; c=p1.y*p2.x-p1.x*p2.y;</div><div class=\"line\">&#125;</div><div class=\"line\">bool Judge(int i,int j)&#123;</div><div class=\"line\">\tif(sqr(yao[i].x-guai[j].x)+sqr(yao[i].y-guai[j].y)&gt;sqr(yao[i].r))return false;</div><div class=\"line\">\tdouble a,b,c;</div><div class=\"line\">\tgetline(yao[i],guai[j],a,b,c);</div><div class=\"line\">\tfor(int k=1;k&lt;=K;k++)</div><div class=\"line\">\t\tif(fabs(Tree[k].x*a+Tree[k].y*b+c)/(double)sqrt((sqr(a)+sqr(b)))&lt;Tree[k].r)&#123;</div><div class=\"line\">\t\t\tcout&lt;&lt;a&lt;&lt;\" \"&lt;&lt;b&lt;&lt;\" \"&lt;&lt;c&lt;&lt;\" \"&lt;&lt;k&lt;&lt;endl;</div><div class=\"line\">\t\t\tcout&lt;&lt;fabs(Tree[k].x*a+Tree[k].y*b+c)/sqrt((sqr(a)+sqr(b)))&lt;&lt;\" \"&lt;&lt;Tree[k].r&lt;&lt;endl;</div><div class=\"line\">\t\t\twhile(1);</div><div class=\"line\">\t\t\treturn false;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\treturn true;</div><div class=\"line\">&#125;*/</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"keyword\">int</span> mid)</span></span>&#123;</div><div class=\"line\">\tlen=<span class=\"number\">1</span>; <span class=\"built_in\">memset</span>(head,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)Add_edge(st,i,mid/yao[i].t+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Map[i][j])Add_edge(i,j+N,<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)Add_edge(i+N,en,<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">BFS</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(dis));</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(st); dis[st]=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[tmp],y=A[i].to;i;i=A[i].next,y=A[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[y]==<span class=\"number\">-1</span>&amp;&amp;A[i].flow)&#123;</div><div class=\"line\">\t\t\t\tdis[y]=dis[tmp]+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tQ.push(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> dis[en]==<span class=\"number\">-1</span>? <span class=\"number\">0</span>:<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> flow)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x==en||flow==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> flow;</div><div class=\"line\">\t<span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> &amp;i=cur[x],y=A[i].to;i;i=A[i].next,y=A[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(dis[y]==dis[x]+<span class=\"number\">1</span>&amp;&amp;A[i].flow&amp;&amp;flow)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> k=DFS(y,min(flow,A[i].flow));</div><div class=\"line\">\t\t\tflow-=k; tmp+=k; A[i].flow-=k; A[i^<span class=\"number\">1</span>].flow+=k;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flow)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Dinic</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(BFS())&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(cur,head,<span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">\t\tans+=DFS(st,INF);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;N,&amp;M,&amp;K); st=<span class=\"number\">0</span>,en=N+M+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> Max=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,&amp;yao[i].x,&amp;yao[i].y,&amp;yao[i].r,&amp;yao[i].t),Max=Max&gt;yao[i].t? Max:yao[i].t;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;guai[i].x,&amp;guai[i].y);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=K;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;Tree[i].x,&amp;Tree[i].y,&amp;Tree[i].r);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=M;j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Judge(i,j))Map[i][j]=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Map[i][j])flag[j]=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)<span class=\"keyword\">if</span>(!flag[i])&#123;<span class=\"built_in\">puts</span>(<span class=\"string\">\"-1\"</span>);<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> l=<span class=\"number\">0</span>,r=Max*M,mid;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(l&lt;=r)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</div><div class=\"line\">\t\tBuild(mid);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(M==Dinic())Ans=mid,r=mid<span class=\"number\">-1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> l=mid+<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,Ans);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注销部分为我的代码，具体为什么不对，还没有发现，只能借鉴大神的代码了。错误的部分是判断巫妖与精灵所在直线上是否有树木挡住。</p>\n"}