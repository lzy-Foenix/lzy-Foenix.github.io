{"tags":[{"name":"LCA","permalink":"http://lzy-foenix.github.io/tags/LCA/","url":"\\async\\tags\\LCA.json","count":4}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\20\\BZOJ-3732-Network.json","date":1426812648000,"path":{"year":2015,"month":3,"day":20,"name":"BZOJ-3732-Network"},"title":"BZOJ-3732-Network","permalink":"http://lzy-foenix.github.io/2015/03/20/BZOJ-3732-Network/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>这道题要求求最大值最小，那么我们可能想到二分，但是效率绝对会跪，那么我们先考虑最小这个问题，由于是求某一条路径上的最大值，那么我们就要首先保证这条路径也要是最小的，那么答案就很显然对了，就是求最小生成树，然后求两个点之间的LCA的最大值。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">15005</span>,MAXM=<span class=\"number\">30005</span>,MAXD=<span class=\"number\">21</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,K,a,b,c;</div><div class=\"line\"><span class=\"keyword\">int</span> Max[MAXN][MAXD],fa[MAXN][MAXD],Deep[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> f[MAXN],r1,r2;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x!=f[x])f[x]=find(f[x]);</div><div class=\"line\">\t<span class=\"keyword\">return</span> f[x];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next,cost;</div><div class=\"line\">&#125;Edge[MAXM&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">struct</span> NODE&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,y,z;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> NODE &amp;A)<span class=\"keyword\">const</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> z&lt;A.z;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;Ea[MAXM];</div><div class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"number\">1</span>,head[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; Edge[len].cost=c; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"keyword\">int</span> now,<span class=\"keyword\">int</span> deep)</span></span>&#123;</div><div class=\"line\">\tDeep[now]=deep;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[now],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!fa[y][<span class=\"number\">0</span>])&#123;</div><div class=\"line\">\t\t\tfa[y][<span class=\"number\">0</span>]=now; Max[y][<span class=\"number\">0</span>]=Edge[i].cost;</div><div class=\"line\">\t\t\tBuild(y,deep+<span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;N,&amp;M,&amp;K);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;a,&amp;b,&amp;c);</div><div class=\"line\">\t\tEa[i].x=a; Ea[i].y=b; Ea[i].z=c;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)f[i]=i;</div><div class=\"line\">\tsort(Ea+<span class=\"number\">1</span>,Ea+M+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\tr1=find(Ea[i].x); r2=find(Ea[i].y);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(r1!=r2)&#123;</div><div class=\"line\">\t\t\tf[r2]=r1;</div><div class=\"line\">\t\t\tAdd_edge(Ea[i].x,Ea[i].y,Ea[i].z);</div><div class=\"line\">\t\t\tAdd_edge(Ea[i].y,Ea[i].x,Ea[i].z);</div><div class=\"line\">\t\t\tcnt++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt==N<span class=\"number\">-1</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!fa[i][<span class=\"number\">0</span>])&#123;</div><div class=\"line\">\t\t\tfa[i][<span class=\"number\">0</span>]=i; Max[i][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tBuild(i,<span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;MAXD;j++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t\tfa[i][j]=fa[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>];</div><div class=\"line\">\t\t\tMax[i][j]=max(Max[i][j<span class=\"number\">-1</span>],Max[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(Deep[x]&lt;Deep[y])swap(x,y);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=MAXD<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Deep[fa[x][j]]&gt;=Deep[y])&#123;</div><div class=\"line\">\t\t\tres=max(res,Max[x][j]);</div><div class=\"line\">\t\t\tx=fa[x][j]; </div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x!=y)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=MAXD<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(fa[x][j]!=fa[y][j])&#123;</div><div class=\"line\">\t\t\t\tres=max(res,max(Max[x][j],Max[y][j]));</div><div class=\"line\">\t\t\t\tx=fa[x][j]; y=fa[y][j];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tres=max(res,max(Max[x][<span class=\"number\">0</span>],Max[y][<span class=\"number\">0</span>]));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=K;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,LCA(a,b));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tInit();</div><div class=\"line\">\tWork();</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}