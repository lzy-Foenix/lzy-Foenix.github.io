{"tags":[{"name":"一般动规和递推","permalink":"http://lzy-foenix.github.io/tags/一般动规和递推/","url":"\\async\\tags\\一般动规和递推.json","count":4}],"categories":[{"name":"动态规划","permalink":"http://lzy-foenix.github.io/categories/动态规划/","url":"\\async\\categories\\动态规划.json","count":11}],"url":"\\async\\posts\\2015\\03\\24\\BZOJ-3173[TJOI2013]最长上升子序列.json","date":1427159338000,"path":{"year":2015,"month":3,"day":24,"name":"BZOJ-3173[TJOI2013]最长上升子序列"},"title":"BZOJ-3173[TJOI2013]最长上升子序列","permalink":"http://lzy-foenix.github.io/2015/03/24/BZOJ-3173[TJOI2013]最长上升子序列/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>好巧妙的把平衡树和二分lis结合起来。先用平衡树求出最终的序列的样子，然后我们的数列有一个性质，那就是当我们插入一个数的时候，数列中的所有的数都比这个数小，所以当我们枚举每个数的时候，我们就二分答案序列中的第一个比他大的数，如果没有，那么这个数就是在末尾，那么肯定答案就+1，如果不是，并且这个数二分位置上的数小，那么就替换他（贪心），然后我们用一个数组来记录每个数出现的时候的答案，之后输出就好了，注意输出的时候可能这个数不是最长的那个子序列中的数，所以我们要时刻保留最长的那个序列的长度，并每次输出的时候比较更新。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">100005</span>,INF=(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">29</span>);</div><div class=\"line\"><span class=\"keyword\">int</span> N,cnt,root,mn[MAXN],Max,Ans[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> siz[MAXN],v[MAXN],rnk[MAXN],l[MAXN],r[MAXN];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Updata</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;siz[x]=siz[l[x]]+siz[r[x]]+<span class=\"number\">1</span>;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Lupdata</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t=r[k]; r[k]=l[t]; l[t]=k; Updata(k); Updata(t); k=t;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Rupdata</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;k)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t=l[k]; l[k]=r[t]; r[t]=k; Updata(k); Updata(t); k=t;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x,<span class=\"keyword\">int</span> rank)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!x)&#123;</div><div class=\"line\">\t\tx=++cnt; rnk[x]=rand()%<span class=\"number\">100000</span>+<span class=\"number\">1</span>; siz[x]=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsiz[x]++;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(siz[l[x]]&lt;rank)&#123;</div><div class=\"line\">\t\tInsert(r[x],rank-siz[l[x]]<span class=\"number\">-1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(rnk[r[x]]&gt;rnk[x])</div><div class=\"line\">\t\t\tLupdata(x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tInsert(l[x],rank);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(rnk[l[x]]&gt;rnk[x])</div><div class=\"line\">\t\t\tRupdata(x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!x)<span class=\"keyword\">return</span>;</div><div class=\"line\">\tDFS(l[x]);</div><div class=\"line\">\tv[++v[<span class=\"number\">0</span>]]=x;</div><div class=\"line\">\tDFS(r[x]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(mn,<span class=\"number\">127</span>,<span class=\"keyword\">sizeof</span> mn);mn[<span class=\"number\">0</span>]=-INF;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> t=upper_bound(mn,mn+Max+<span class=\"number\">1</span>,v[i])-mn;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(mn[t<span class=\"number\">-1</span>]&lt;=v[i])&#123;</div><div class=\"line\">\t\t\tmn[t]=min(mn[t],v[i]);</div><div class=\"line\">\t\t\tAns[v[i]]=t;</div><div class=\"line\">\t\t\tMax=max(Max,t);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);<span class=\"keyword\">int</span> a;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a);</div><div class=\"line\">\t\tInsert(root,a);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tDFS(root);</div><div class=\"line\">\tWork();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\tAns[i]=max(Ans[i<span class=\"number\">-1</span>],Ans[i]);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,Ans[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}