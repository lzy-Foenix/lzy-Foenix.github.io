{"tags":[{"name":"主席树","permalink":"http://lzy-foenix.github.io/tags/主席树/","url":"\\async\\tags\\主席树.json","count":2}],"categories":[{"name":"数据结构","permalink":"http://lzy-foenix.github.io/categories/数据结构/","url":"\\async\\categories\\数据结构.json","count":18}],"url":"\\async\\posts\\2015\\03\\24\\BZOJ-3524[POI2014]Couriers.json","date":1427179557000,"path":{"year":2015,"month":3,"day":24,"name":"BZOJ-3524[POI2014]Couriers"},"title":"BZOJ-3524[POI2014]Couriers/BZOJ-2223[COCI2009]PATULJCI","permalink":"http://lzy-foenix.github.io/2015/03/24/BZOJ-3524[POI2014]Couriers/","content":"<hr>\n<a id=\"more\"></a>\n<p>好神奇的样子。。。</p>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>用可持久化的线段树，貌似是主席树，那一大堆神奇的操作，我已无力。。。</p>\n<p><a href=\"http://blog.csdn.net/zhb1997/article/details/32731337\" target=\"_blank\" rel=\"external\">引用题解</a></p>\n<p>可持久化线段树是这样一个数据结构：它不仅实现线段树的操作，而且可以访问线段树的历史版本。<br>做法是“建n棵线段树”。</p>\n<p>当然不是n^2logn的满二叉树啦</p>\n<p>对于这题：首先搞出一颗权值线段树（就是区间（l，r）表示数字大小在（l，r）中的有多少个，a[i]&lt;=10^9之类太大的要离散搞）。</p>\n<p>每次增加一个数k进去的时候，相当于从根节点到叶节点的所有包含k的区间的sum+1。</p>\n<p>但是我们要保留以前的版本，怎么做呢？</p>\n<p>很容易发现每次加入一个k，修改的都只有树上的一条从根到叶的链上的sum，也就是说其他数据我们是可以共用的</p>\n<p>所以每次加入k的时候只要再插入一条链就可以完成修改。</p>\n<p>比如当前我们插入链做到一个点，首先把它的左右儿子改成它的上一个版本的左右儿子。然后看k在左边还是右边，再往那一边继续递归下去               <del>实在是晕，Add的时候把l到mid 打成了1到mid，调了半天啊！！！</del></p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">10000001</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,Lim,Size;</div><div class=\"line\"><span class=\"keyword\">int</span> ls[MAXN],rs[MAXN],sum[MAXN],root[<span class=\"number\">500001</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> &amp;y,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> v)</span></span>&#123;</div><div class=\"line\">\ty=++Size;</div><div class=\"line\">\tsum[y]=sum[x]+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span>;</div><div class=\"line\">\tls[y]=ls[x]; rs[y]=rs[x];</div><div class=\"line\">\t<span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(v&lt;=mid)Add(ls[x],ls[y],l,mid,v);</div><div class=\"line\">\t<span class=\"keyword\">else</span> Add(rs[x],rs[y],mid+<span class=\"number\">1</span>,r,v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> tmp=(R-L+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>,l=<span class=\"number\">1</span>,r=N;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x=root[L<span class=\"number\">-1</span>],y=root[R];</div><div class=\"line\">\t<span class=\"keyword\">while</span>(l!=r)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(sum[y]-sum[x]&lt;=tmp)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(sum[ls[y]]-sum[ls[x]]&gt;tmp)&#123;</div><div class=\"line\">\t\t\tr=mid,x=ls[x],y=ls[y];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum[rs[y]]-sum[rs[x]]&gt;tmp)&#123;</div><div class=\"line\">\t\t\tl=mid+<span class=\"number\">1</span>,x=rs[x],y=rs[y];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> l;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M); <span class=\"keyword\">int</span> a,b;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a);</div><div class=\"line\">\t\tAdd(root[i<span class=\"number\">-1</span>],root[i],<span class=\"number\">1</span>,N,a);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,Query(a,b));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}