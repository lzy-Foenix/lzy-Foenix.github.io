{"tags":[{"name":"二分图","permalink":"http://lzy-foenix.github.io/tags/二分图/","url":"\\async\\tags\\二分图.json","count":3}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\19\\BZOJ-2150-部落战争.json","date":1426764652000,"path":{"year":2015,"month":3,"day":19,"name":"BZOJ-2150-部落战争"},"title":"BZOJ-2150-部落战争","permalink":"http://lzy-foenix.github.io/2015/03/19/BZOJ-2150-部落战争/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>这就是裸的二分图最大匹配问题，恩，如果用网络流的思想来想会更好理解一些，从每个部落向他能到达的地方连边（注意，题目说了是从上往下走，所以只有四个方向，而且不能回去，所以不能建立双向边）</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M,R,C,X[<span class=\"number\">9</span>],Y[<span class=\"number\">9</span>],pre[<span class=\"number\">2505</span>],ans,sum;</div><div class=\"line\"><span class=\"keyword\">char</span> A[<span class=\"number\">55</span>][<span class=\"number\">55</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[<span class=\"number\">2505</span>];</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">&#125;Edge[<span class=\"number\">20005</span>&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"number\">1</span>,head[<span class=\"number\">2505</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*N+y;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;\t </div><div class=\"line\">\t<span class=\"keyword\">int</span> k1=Calc(x,y);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">8</span>;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmx=x+X[i],tmy=y+Y[i];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(tmx&gt;<span class=\"number\">0</span> &amp;&amp; tmx&lt;=M &amp;&amp; tmy&gt;<span class=\"number\">0</span> &amp;&amp; tmy&lt;=N &amp;&amp; tmx&gt;=x &amp;&amp; A[tmx][tmy]==<span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> k2=Calc(tmx,tmy);</div><div class=\"line\">\t\t\tAdd_edge(k1,k2);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> now)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[now],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag[y])&#123;</div><div class=\"line\">\t\t\tflag[y]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!pre[y] || find(pre[y]))&#123;</div><div class=\"line\">\t\t\t\tpre[y]=now;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,&amp;M,&amp;N,&amp;R,&amp;C);</div><div class=\"line\">\tX[<span class=\"number\">1</span>]=R; X[<span class=\"number\">2</span>]=R; X[<span class=\"number\">3</span>]=C; X[<span class=\"number\">4</span>]=C; X[<span class=\"number\">5</span>]=-R; X[<span class=\"number\">6</span>]=-R; X[<span class=\"number\">7</span>]=-C; X[<span class=\"number\">8</span>]=-C;</div><div class=\"line\">\tY[<span class=\"number\">1</span>]=C; Y[<span class=\"number\">2</span>]=-C;Y[<span class=\"number\">3</span>]=R; Y[<span class=\"number\">4</span>]=-R;Y[<span class=\"number\">5</span>]=C;  Y[<span class=\"number\">6</span>]=-C; Y[<span class=\"number\">7</span>]=R;  Y[<span class=\"number\">8</span>]=-R;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,A[i]+<span class=\"number\">1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=N;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(A[i][j]==<span class=\"string\">'.'</span>)</div><div class=\"line\">\t\t\t\tsum++,Build(i,j);</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=N;j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(A[i][j]==<span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> k=Calc(i,j);</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">memset</span>(flag,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(flag));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(find(k))ans++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,sum-ans);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}