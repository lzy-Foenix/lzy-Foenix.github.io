{"tags":[{"name":"二分图","permalink":"http://lzy-foenix.github.io/tags/二分图/","url":"\\async\\tags\\二分图.json","count":3}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\03\\19\\BZOJ-1059[ZJOI2007]矩阵游戏.json","date":1426768865000,"path":{"year":2015,"month":3,"day":19,"name":"BZOJ-1059[ZJOI2007]矩阵游戏"},"title":"BZOJ-1059[ZJOI2007]矩阵游戏","permalink":"http://lzy-foenix.github.io/2015/03/19/BZOJ-1059[ZJOI2007]矩阵游戏/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>我们可以先想一下，位于同行同列的格点，无论怎么变换还都是同行同列，所以我们就只需要选出来N个黑色个点，使他们的x,y坐标互不相同。对于一个黑色格点(i,j)就从i连边向j，求二分图最大匹配，然后如果匹配是N，就是有解的。或者可以这样理解，有st向每行i连接流量为1的边，有每列j向en连接流量为1的边，然后有黑色格点的点，有i向j流量为1的边，然后求最大流，看最大流是否大于等于N。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">205</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> T,N,A[<span class=\"number\">205</span>][<span class=\"number\">205</span>],pre[MAXN];</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">&#125;Edge[MAXN*<span class=\"number\">200</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"number\">1</span>,head[MAXN];</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[<span class=\"number\">205</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*N+y;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(head,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(head)); len=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=N;j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;A[i][j]);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(A[i][j])Add_edge(i,j);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> now)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[now],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag[y])&#123;</div><div class=\"line\">\t\t\tflag[y]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!pre[y] || find(pre[y]))&#123;</div><div class=\"line\">\t\t\t\tpre[y]=now; <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(pre,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(pre));</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">memset</span>(flag,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(flag));</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!find(i))&#123;<span class=\"built_in\">puts</span>(<span class=\"string\">\"No\"</span>);<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"Yes\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</div><div class=\"line\">\t<span class=\"keyword\">while</span>(T--)&#123;</div><div class=\"line\">\t\tInit();</div><div class=\"line\">\t\tWork();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}