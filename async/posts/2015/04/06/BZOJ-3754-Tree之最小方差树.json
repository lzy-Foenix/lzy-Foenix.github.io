{"tags":[{"name":"最小方差生成树","permalink":"http://lzy-foenix.github.io/tags/最小方差生成树/","url":"\\async\\tags\\最小方差生成树.json","count":1}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\04\\06\\BZOJ-3754-Tree之最小方差树.json","date":1428304519000,"path":{"year":2015,"month":4,"day":6,"name":"BZOJ-3754-Tree之最小方差树"},"title":"BZOJ-3754-Tree之最小方差树","permalink":"http://lzy-foenix.github.io/2015/04/06/BZOJ-3754-Tree之最小方差树/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>普通的做法就是枚举边数，但是我们可以该改变枚举的东西，变为枚举平均值，我们可以先知道，这个边权和一定在最小生成树和最大生成树中间，那么我们就可以枚举这之间的每一个边权和，然后求出平均值，把每条边的边权变成(edge[i].cost-w)^2，之后我们再做最小生成树，得到答案，但是这时候我们求出来的答案不一定对应我们枚举的边权和，所以要在最后判断是否是当前枚举的边权和，如果是的话，才可以进行比较，比较最小方差。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">double</span> DB;</div><div class=\"line\"><span class=\"keyword\">int</span> N,M;</div><div class=\"line\"><span class=\"keyword\">double</span> Maxv,Minv,ans;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,y;</div><div class=\"line\">\t<span class=\"keyword\">double</span> cost,co;</div><div class=\"line\">&#125;Edge[<span class=\"number\">2005</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">comp1</span><span class=\"params\">(<span class=\"keyword\">const</span> node &amp;A,<span class=\"keyword\">const</span> node &amp;B)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> A.cost&lt;B.cost;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">comp2</span><span class=\"params\">(<span class=\"keyword\">const</span> node &amp;A,<span class=\"keyword\">const</span> node &amp;B)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> A.cost&gt;B.cost;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">comp3</span><span class=\"params\">(<span class=\"keyword\">const</span> node &amp;A,<span class=\"keyword\">const</span> node &amp;B)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> A.co&lt;B.co;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> DB <span class=\"title\">sqr</span><span class=\"params\">(DB x)</span></span>&#123;<span class=\"keyword\">return</span> x*x;&#125;</div><div class=\"line\"><span class=\"keyword\">int</span> fa[<span class=\"number\">105</span>],r1,r2;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x==fa[x]? x:fa[x]=find(fa[x]);&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)fa[i]=i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">kruscal</span><span class=\"params\">(<span class=\"keyword\">int</span> sum)</span></span>&#123;</div><div class=\"line\">\tClear();</div><div class=\"line\">\tDB Ave=(DB)sum/(DB)(N<span class=\"number\">-1</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)Edge[i].co=sqr(Edge[i].cost-Ave);</div><div class=\"line\">\tsort(Edge+<span class=\"number\">1</span>,Edge+M+<span class=\"number\">1</span>,comp3);</div><div class=\"line\">\t<span class=\"keyword\">double</span> ans1=<span class=\"number\">0.0</span>,ans2=<span class=\"number\">0.0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\tr1=find(Edge[i].x); r2=find(Edge[i].y);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(r1!=r2)&#123;</div><div class=\"line\">\t\t\tfa[r2]=r1; cnt++;</div><div class=\"line\">\t\t\tans1+=Edge[i].cost; ans2+=Edge[i].co;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt==N<span class=\"number\">-1</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tans2/=DB(N<span class=\"number\">-1</span>); ans2=<span class=\"built_in\">sqrt</span>(ans2);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(ans1==sum)ans=min(ans,ans2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M); ans=<span class=\"number\">0x7fffffff</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%lf\"</span>,&amp;Edge[i].x,&amp;Edge[i].y,&amp;Edge[i].cost);</div><div class=\"line\">\tsort(Edge+<span class=\"number\">1</span>,Edge+M+<span class=\"number\">1</span>,comp1);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)Minv+=Edge[i].cost;</div><div class=\"line\">\tsort(Edge+<span class=\"number\">1</span>,Edge+M+<span class=\"number\">1</span>,comp2);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)Maxv+=Edge[i].cost;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=Minv;i&lt;=Maxv;i++)kruscal(i);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.4f\\n\"</span>,ans);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}