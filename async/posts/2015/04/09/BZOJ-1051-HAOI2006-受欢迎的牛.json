{"tags":[{"name":"强联通分量","permalink":"http://lzy-foenix.github.io/tags/强联通分量/","url":"\\async\\tags\\强联通分量.json","count":3}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\04\\09\\BZOJ-1051-HAOI2006-受欢迎的牛.json","date":1428585265000,"path":{"year":2015,"month":4,"day":9,"name":"BZOJ-1051-HAOI2006-受欢迎的牛"},"title":"BZOJ-1051[HAOI2006]受欢迎的牛","permalink":"http://lzy-foenix.github.io/2015/04/09/BZOJ-1051-HAOI2006-受欢迎的牛/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解:\"></a>题解:</h3><p>先用强联通分量缩点，然后看缩的点中有多少出度为0的点，如果多余1个，那么答案就是0，否则答案就是那个出度为0的点的小点数目</p>\n<p>关于为什么，因为我们呢经过缩点之后可以想象到，这些大点必定相连起来，如果不相连的话，那么必定存在断的部分，那么就不可能出现被所有的牛膜拜的牛，所以出度为0就是这个意思。</p>\n<h3 id=\"代码；\"><a href=\"#代码；\" class=\"headerlink\" title=\"代码；\"></a>代码；</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">10005</span>,MAXM=<span class=\"number\">50005</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">&#125;Edge[MAXM];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"number\">1</span>,scnt=<span class=\"number\">0</span>,Tim=<span class=\"number\">0</span>,top=<span class=\"number\">0</span>,N,M;</div><div class=\"line\"><span class=\"comment\">//scnt表示缩完点之后的点数，Tim代表时间戳，top代表当前栈</span></div><div class=\"line\"><span class=\"keyword\">int</span> head[MAXN],Dfn[MAXN],Low[MAXN],InStack[MAXN],Stack[MAXN],belong[MAXN],A[MAXM],B[MAXM],Out[MAXN],Siz[MAXN];</div><div class=\"line\"><span class=\"comment\">//Dfn代表每个点的时间戳</span></div><div class=\"line\"><span class=\"comment\">//Low[x]代表x或者x的子节点中，最早可以追溯到的栈中节点的次序</span></div><div class=\"line\"><span class=\"comment\">//InStack代表是否在栈中</span></div><div class=\"line\"><span class=\"comment\">//Stack代表当前栈</span></div><div class=\"line\"><span class=\"comment\">//belong[x]代表x属于哪一个大点</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t;</div><div class=\"line\">\tDfn[x]=Low[x]=++Tim;</div><div class=\"line\">\tStack[++top]=x;</div><div class=\"line\">\tInStack[x]=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!Dfn[y])&#123;</div><div class=\"line\">\t\t\tTarjan(y);</div><div class=\"line\">\t\t\tLow[x]=min(Low[x],Low[y]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(InStack[y]) Low[x]=min(Low[x],Dfn[y]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(Dfn[x]==Low[x])&#123;</div><div class=\"line\">\t\tscnt++;</div><div class=\"line\">\t\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t\tt=Stack[top--];</div><div class=\"line\">\t\t\tInStack[t]=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tbelong[t]=scnt;</div><div class=\"line\">\t\t\tSiz[scnt]++;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(x!=t);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)</div><div class=\"line\">\t <span class=\"keyword\">if</span>(belong[A[i]]!=belong[B[i]])</div><div class=\"line\">\t  Out[belong[A[i]]]++;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,t=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=scnt;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Out[i]==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!t)ans=Siz[i],t=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t\tans=<span class=\"number\">0</span>;<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;M);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;A[i],&amp;B[i]);</div><div class=\"line\">\t\tAdd_edge(A[i],B[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!Dfn[i])Tarjan(i);</div><div class=\"line\">\tWork();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}