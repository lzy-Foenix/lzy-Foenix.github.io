{"tags":[{"name":"区间动规","permalink":"http://lzy-foenix.github.io/tags/区间动规/","url":"\\async\\tags\\区间动规.json","count":3}],"categories":[{"name":"动态规划","permalink":"http://lzy-foenix.github.io/categories/动态规划/","url":"\\async\\categories\\动态规划.json","count":11}],"url":"\\async\\posts\\2015\\04\\17\\BZOJ-1090-SCOI2003-字符串折叠.json","date":1429253479000,"path":{"year":2015,"month":4,"day":17,"name":"BZOJ-1090-SCOI2003-字符串折叠"},"title":"BZOJ-1090[SCOI2003]字符串折叠","permalink":"http://lzy-foenix.github.io/2015/04/17/BZOJ-1090-SCOI2003-字符串折叠/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>令f[i][j]表示从i到j的最短折叠，初始f[i][j]=(j-i+1),转移分两种，一种就是正常的转移f[i][j]=max(f[i][j],f[i][k]+f[k+1][j]);另一种是前一段在后一段中出现过，直接Judge匹配即可，注意是出现过也就意味着可能不止一次出现，重复串。然而转移的时候要加上2个括号的长度，以及重复串的数目的位数。可用记忆化搜索</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">char</span> ch[<span class=\"number\">105</span>];</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[<span class=\"number\">105</span>][<span class=\"number\">105</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">105</span>][<span class=\"number\">105</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Judge</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cl,<span class=\"keyword\">int</span> cr)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>((r-l+<span class=\"number\">1</span>)%(cr-cl+<span class=\"number\">1</span>)!=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=l;i&lt;=r;i++)</div><div class=\"line\">\t    <span class=\"keyword\">if</span>(ch[i]!=ch[(i-l)%(cr-cl+<span class=\"number\">1</span>)+cl])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(x)&#123;t++;x/=<span class=\"number\">10</span>;&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> t;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DP</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(l==r)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(flag[l][r])<span class=\"keyword\">return</span> f[l][r];</div><div class=\"line\">\tflag[l][r]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t=r-l+<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=l;i&lt;r;i++)&#123;</div><div class=\"line\">\t\tt=min(t,DP(l,i)+DP(i+<span class=\"number\">1</span>,r));</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Judge(i+<span class=\"number\">1</span>,r,l,i))</div><div class=\"line\">\t\t    t=min(t,DP(l,i)+<span class=\"number\">2</span>+Calc((r-i)/(i-l+<span class=\"number\">1</span>)+<span class=\"number\">1</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> (f[l][r]=t);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,ch+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,DP(<span class=\"number\">1</span>,<span class=\"built_in\">strlen</span>(ch+<span class=\"number\">1</span>)));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}