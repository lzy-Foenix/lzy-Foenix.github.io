{"tags":[{"name":"树形动规","permalink":"http://lzy-foenix.github.io/tags/树形动规/","url":"\\async\\tags\\树形动规.json","count":2}],"categories":[{"name":"动态规划","permalink":"http://lzy-foenix.github.io/categories/动态规划/","url":"\\async\\categories\\动态规划.json","count":11}],"url":"\\async\\posts\\2015\\04\\17\\BZOJ-1912-APIO2010-patrol-巡逻.json","date":1429271732000,"path":{"year":2015,"month":4,"day":17,"name":"BZOJ-1912-APIO2010-patrol-巡逻"},"title":"BZOJ-1912[APIO2010]patrol 巡逻","permalink":"http://lzy-foenix.github.io/2015/04/17/BZOJ-1912-APIO2010-patrol-巡逻/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>前三十分是k=1的时候，我们稍加分析可以得出，一种最优的建边的方案是在树的直径上的两个端点连接边，那么就要求出最长路。<br>Ans=2*（n-1）-（Max-1）;</p>\n<p>对于k=2的时候，我们就不仅要就最长路，还要求次长路，而且不能有重复的路径，那么我们先求最长路，把走过的边的权值记为-1，再去树形动规求直径。这里树形动规要面临3中情况，一种是当前枚举的点值直径的顶点，一种是直径通过当前点，还有一种就是直径在当前点的子树中，然而我们可以DFS每个点，那么第三种情况就可以不用考虑了。我们用记录最大值和次大值来维护以一个点为顶点的”直径”，那么以一种情况就是最大值，第二种情况就是最大值加次大值。所以显而易见我们用一个Max记录max1+max2。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">100005</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next,cost;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> flag;</div><div class=\"line\">&#125;Edge[MAXN&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> N,K,len=<span class=\"number\">1</span>,st,en,Max;</div><div class=\"line\"><span class=\"keyword\">int</span> head[MAXN],pre[MAXN],Len[MAXN],path[MAXN];</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[MAXN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; Edge[len].cost=c; head[a]=len;</div><div class=\"line\">\tlen++; Edge[len].to=a; Edge[len].next=head[b]; Edge[len].cost=c; head[b]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS_1</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(x); flag[x]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[tmp],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag[y] &amp;&amp; !Edge[i].flag)&#123;</div><div class=\"line\">\t\t\t\tst=y; flag[y]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\tQ.push(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS_2</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(flag,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(flag));</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(x); flag[x]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[tmp],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag[y] &amp;&amp; !Edge[i].flag)&#123;</div><div class=\"line\">\t\t\t\tpath[y]=i; pre[y]=tmp; Len[y]=Len[tmp]+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tMax=Max&gt;Len[y]? Max:Len[y];</div><div class=\"line\">\t\t\t\tflag[y]=<span class=\"literal\">true</span>; en=y;</div><div class=\"line\">\t\t\t\tQ.push(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DFS_1</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> fa)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> mx1=<span class=\"number\">0</span>,mx2=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x];i;i=Edge[i].next)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Edge[i].to!=fa)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v=Edge[i].cost+DFS_1(Edge[i].to,x);</div><div class=\"line\">            <span class=\"keyword\">if</span>(v&gt;mx1)mx2=mx1,mx1=v;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v&gt;mx2)mx2=v;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(mx1+mx2&gt;Max)Max=mx1+mx2;</div><div class=\"line\">    <span class=\"keyword\">return</span> mx1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u=en;u;u=pre[u])&#123;</div><div class=\"line\">\t\tEdge[path[u]^<span class=\"number\">1</span>].cost=<span class=\"number\">-1</span>;</div><div class=\"line\">\t\tEdge[path[u]].cost=<span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ans=<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)-(Max<span class=\"number\">-1</span>); Max=<span class=\"number\">0</span>;</div><div class=\"line\">\tDFS_1(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans-(Max<span class=\"number\">-1</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;N,&amp;K);</div><div class=\"line\">\t<span class=\"keyword\">int</span> a,b;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);</div><div class=\"line\">\t\tAdd_edge(a,b,<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tBFS_1(<span class=\"number\">1</span>); BFS_2(st);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(K==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"number\">2</span>*(N<span class=\"number\">-1</span>)-Max+<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> Work();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}