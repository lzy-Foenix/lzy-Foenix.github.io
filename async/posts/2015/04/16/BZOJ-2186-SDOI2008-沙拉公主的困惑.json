{"tags":[{"name":"数论","permalink":"http://lzy-foenix.github.io/tags/数论/","url":"\\async\\tags\\数论.json","count":8}],"categories":[{"name":"数学","permalink":"http://lzy-foenix.github.io/categories/数学/","url":"\\async\\categories\\数学.json","count":24}],"url":"\\async\\posts\\2015\\04\\16\\BZOJ-2186-SDOI2008-沙拉公主的困惑.json","date":1429186562000,"path":{"year":2015,"month":4,"day":16,"name":"BZOJ-2186-SDOI2008-沙拉公主的困惑"},"title":"BZOJ-2186[SDOI2008]沙拉公主的困惑","permalink":"http://lzy-foenix.github.io/2015/04/16/BZOJ-2186-SDOI2008-沙拉公主的困惑/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>题目要求求互质的个数，那么就可以想到是欧拉函数。那么m!以内的互质的个数就是$\\phi(m!)$然后大于m!的怎么办呢？<br>我们要了解到一个东西$Gcd(a+b,b)=Gcd(b,(a+b)\\mod b)=Gcd(b,a\\mod b)=Gcd(a,b)$所以大于m!的部分就等于小于m!的部分，所以答案就是$\\phi(m!)\\cdot \\frac{n!}{m!}$所以要用到欧拉定理和逆元。<br>即使提前筛出来阶乘和逆元，然而这个式子的效率却不敢恭维= =，所以我们还要变换，$\\phi(m!)=m!\\cdot (p-1)/p….$p是m!的质因子。代回原式子得$Ans=n!\\cdot (p-1)/p$，还要了解到m!的因子就是1-m的素数，很好理解。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">10000005</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> N,M,T,mod,tot;</div><div class=\"line\"><span class=\"keyword\">int</span> Inv[MAXN],Fact[MAXN],prime[MAXN],Ans[MAXN];</div><div class=\"line\"><span class=\"keyword\">bool</span> not_prime[MAXN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;<span class=\"keyword\">char</span> ch=getchar();</div><div class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)ch=getchar();</div><div class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;ch=getchar();&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GetPre</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tInv[<span class=\"number\">1</span>]=<span class=\"number\">1</span>; Fact[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">10000000</span>;i++)&#123;</div><div class=\"line\">\t\tFact[i]=(LL)Fact[i<span class=\"number\">-1</span>]*i%mod;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(LL i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">10000000</span>;i++)&#123;</div><div class=\"line\">\t\tLL a=mod/i,b=mod%i;</div><div class=\"line\">\t\tInv[i]=mod-(a*(LL)Inv[b])%mod;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">10000000</span>;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!not_prime[i])prime[++tot]=i;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;i*prime[j]&lt;=<span class=\"number\">10000000</span> &amp;&amp; j&lt;=tot;j++)&#123;</div><div class=\"line\">            not_prime[(LL)i*prime[j]]=<span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tAns[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">10000000</span>;i++)&#123;</div><div class=\"line\">\t\tAns[i]=Ans[i<span class=\"number\">-1</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!not_prime[i])&#123;</div><div class=\"line\">\t\t\tAns[i]=(LL)Ans[i]*(i<span class=\"number\">-1</span>)%mod*Inv[i]%mod;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    T=Get(); mod=Get();</div><div class=\"line\">    GetPre();</div><div class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</div><div class=\"line\">\t\tN=Get(); M=Get();</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,((LL)Fact[N]*Ans[M])%mod);</div><div class=\"line\">\t&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}