{"tags":[{"name":"强联通分量","permalink":"http://lzy-foenix.github.io/tags/强联通分量/","url":"\\async\\tags\\强联通分量.json","count":3}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\04\\11\\BZOJ-1924-SDOI2010-所驼门王的宝藏.json","date":1428721340000,"path":{"year":2015,"month":4,"day":11,"name":"BZOJ-1924-SDOI2010-所驼门王的宝藏"},"title":"BZOJ-1924[SDOI2010]所驼门王的宝藏","permalink":"http://lzy-foenix.github.io/2015/04/11/BZOJ-1924-SDOI2010-所驼门王的宝藏/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>我们把可以到达的点连接起来，做强联通分量，然后在DAG上跑最长路DP</p>\n<p>具体实现的话就是，对于1类门，我们把它在的那一行有宝藏的地方都连边，如果那一个点也是1类门，就连双向边，2,3类门同理。为了避免时间上的TLE，我们可以用vector和map分别储存1,2 和3 类门。</p>\n<p>之后求强联通分量，之后根据原来的图对强联通分量连边，之后在DAG上跑最长路，用DP可解</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXM=<span class=\"number\">1000005</span>,MAXN=<span class=\"number\">100005</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> NODE&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> x,y,t_i;</div><div class=\"line\">&#125;Point[MAXN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">&#125;Edge[MAXM&lt;&lt;<span class=\"number\">1</span>],ex_Edge[MAXM&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> N,R,C,len=<span class=\"number\">1</span>,Tim,top,scnt;</div><div class=\"line\"><span class=\"keyword\">int</span> head[MAXN],Dfn[MAXN],Low[MAXN],Stack[MAXN],Instack[MAXN],belong[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> ex_len,ex_head[MAXN],In[MAXN],F[MAXN],siz[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> X[<span class=\"number\">8</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> Y[<span class=\"number\">8</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">bool</span> flag[MAXN];</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;H[MAXM],L[MAXM];</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;Map[MAXM];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tex_len++; ex_Edge[ex_len].to=b; ex_Edge[ex_len].next=ex_head[a]; ex_head[a]=ex_len;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;N,&amp;R,&amp;C);</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;Point[i].x,&amp;Point[i].y,&amp;Point[i].t_i);</div><div class=\"line\">\t\tH[Point[i].x].push_back(i);</div><div class=\"line\">\t\tL[Point[i].y].push_back(i);</div><div class=\"line\">\t\tMap[Point[i].x][Point[i].y]=i;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=R;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,t=H[i].size();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Point[H[i][j]].t_i == <span class=\"number\">1</span>)&#123;x=H[i][j];<span class=\"keyword\">break</span>;&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</div><div class=\"line\">\t\t\tAdd_edge(x,H[i][j]);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Point[H[i][j]].t_i == <span class=\"number\">1</span>)Add_edge(H[i][j],x);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=C;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,t=L[i].size();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Point[L[i][j]].t_i == <span class=\"number\">2</span>)&#123;x=L[i][j];<span class=\"keyword\">break</span>;&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)&#123;</div><div class=\"line\">\t\t\tAdd_edge(x,L[i][j]);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Point[L[i][j]].t_i == <span class=\"number\">2</span>)Add_edge(L[i][j],x);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Point[i].t_i == <span class=\"number\">3</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> nowx=Point[i].x,nowy=Point[i].y;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">8</span>;k++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> t=Map[nowx+X[k]][nowy+Y[k]];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(t)Add_edge(i,t);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> t;</div><div class=\"line\">\tStack[++top]=x;</div><div class=\"line\">\tDfn[x]=Low[x]=++Tim;</div><div class=\"line\">\tInstack[x]=<span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!Dfn[y])&#123;</div><div class=\"line\">\t\t\tTarjan(y);</div><div class=\"line\">\t\t\tLow[x]=min(Low[x],Low[y]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Instack[y])</div><div class=\"line\">\t\t\tLow[x]=min(Low[x],Dfn[y]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(Dfn[x]==Low[x])&#123;</div><div class=\"line\">\t\tscnt++;</div><div class=\"line\">\t\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t\tt=Stack[top--];</div><div class=\"line\">\t\t\tbelong[t]=scnt;</div><div class=\"line\">\t\t\tInstack[t]=<span class=\"number\">0</span>;</div><div class=\"line\">\t\t\tsiz[scnt]++;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(t!=x);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Rebuild</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=head[i];j;j=Edge[j].next)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> y=Edge[j].to;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(belong[i]!=belong[y])&#123;</div><div class=\"line\">\t\t\t\tAdd(belong[i],belong[y]);</div><div class=\"line\">\t\t\t\tIn[belong[y]]++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> Max=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=scnt;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(In[i]==<span class=\"number\">0</span>) Q.push(i),F[i]=siz[i],Max=Max&gt;F[i]? Max:F[i],flag[i]=<span class=\"literal\">true</span><span class=\"comment\">/*,cout&lt;&lt;i&lt;&lt;endl;*/</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=ex_head[tmp],y=ex_Edge[i].to;i;i=ex_Edge[i].next,y=ex_Edge[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(F[y]&lt;F[tmp]+siz[y])&#123;</div><div class=\"line\">\t\t\t\tF[y]=F[tmp]+siz[y];</div><div class=\"line\">\t\t\t\tMax=Max&gt;F[y]? Max:F[y];</div><div class=\"line\">\t\t\t\tQ.push(y); flag[y]=<span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,Max);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tInit();</div><div class=\"line\">\tBuild();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!Dfn[i])Tarjan(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tRebuild();</div><div class=\"line\">\tWork();</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdin</span>);</div><div class=\"line\">\tfclose(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}