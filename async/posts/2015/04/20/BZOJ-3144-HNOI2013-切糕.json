{"tags":[{"name":"最小割","permalink":"http://lzy-foenix.github.io/tags/最小割/","url":"\\async\\tags\\最小割.json","count":2}],"categories":[{"name":"图论","permalink":"http://lzy-foenix.github.io/categories/图论/","url":"\\async\\categories\\图论.json","count":19}],"url":"\\async\\posts\\2015\\04\\20\\BZOJ-3144-HNOI2013-切糕.json","date":1429534979000,"path":{"year":2015,"month":4,"day":20,"name":"BZOJ-3144-HNOI2013-切糕"},"title":"BZOJ-3144[HNOI2013]切糕","permalink":"http://lzy-foenix.github.io/2015/04/20/BZOJ-3144-HNOI2013-切糕/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>神建图，跪跪跪，Orzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz hzwer</p>\n<p><a href=\"http://hzwer.com/6320.html\" target=\"_blank\" rel=\"external\">引自hzwer</a><br>经典的最小割模型</p>\n<p>首先题目简化为，给出一个矩阵，在矩阵中的每一个格子中添加一个数字，不同的数字，不同的代价，相邻两个格子的差值不能大于D。</p>\n<p>题目要求最大的深度是R，所以对于矩阵中的每一个点都拆成R+1个点。对于矩阵中的一个点，深度k 和深度k+1 连接一条流量为题目给出的权值的边，对于st，st向矩阵中每一个点的第一层的点连接边，对于en，就是矩阵中每一个点的最后一层的点向en连边，流量都是INF，</p>\n<p>那么还有一个限制条件就是D，对应到层数中，就比如是(i,j,d)和(i,j+1,max(d-D,1))连接INF的边，当然是四个方向。<br>然后跑最大流就好了，由于是稠密图，裸地Dinic会TLE，所以要加当前弧优化。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXM=<span class=\"number\">1000005</span>,MAXN=<span class=\"number\">45</span>*<span class=\"number\">45</span>*<span class=\"number\">45</span>+<span class=\"number\">10</span>,INF=(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">30</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next,flow;</div><div class=\"line\">&#125;Edge[MAXM&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> P,Q,R,D,len=<span class=\"number\">1</span>,Lim,st,en;</div><div class=\"line\"><span class=\"keyword\">int</span> A[<span class=\"number\">45</span>][<span class=\"number\">45</span>][<span class=\"number\">45</span>],head[MAXN],Dis[MAXN],cur[MAXN];</div><div class=\"line\"><span class=\"keyword\">int</span> X[<span class=\"number\">4</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> Y[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; Edge[len].flow=c; head[a]=len;</div><div class=\"line\">\tlen++; Edge[len].to=a; Edge[len].next=head[b]; Edge[len].flow=<span class=\"number\">0</span>; head[b]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Calc</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">int</span> k)</span></span>&#123;<span class=\"keyword\">return</span> (i<span class=\"number\">-1</span>)*Lim+(j<span class=\"number\">-1</span>)*Q+k;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,&amp;P,&amp;Q,&amp;R,&amp;D);</div><div class=\"line\">    Lim=P*Q; st=<span class=\"number\">0</span>; en=P*Q*(R+<span class=\"number\">1</span>)+<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=R;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=P;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=Q;k++)</div><div class=\"line\">\t\t\t    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;A[i][j][k]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=R;i++)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=P;j++)</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=Q;k++)</div><div class=\"line\">\t\t\t    <span class=\"built_in\">cout</span>&lt;&lt;Calc(i,j,k)&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//Print();</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=P;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=Q;j++)&#123;</div><div class=\"line\">\t\t\tAdd_edge(st,Calc(<span class=\"number\">1</span>,i,j),INF);</div><div class=\"line\">\t\t\tAdd_edge(Calc(R+<span class=\"number\">1</span>,i,j),en,INF);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=P;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=Q;j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=R;k++)&#123;</div><div class=\"line\">\t\t\t\tAdd_edge(Calc(k,i,j),Calc(k+<span class=\"number\">1</span>,i,j),A[k][i][j]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=P;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=Q;j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">4</span>;k++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tox=i+X[k],toy=j+Y[k];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(tox&lt;=<span class=\"number\">0</span> || tox&gt;P || toy&lt;=<span class=\"number\">0</span> || toy&gt;Q)<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d=<span class=\"number\">1</span>;d&lt;=R;d++)&#123;</div><div class=\"line\">\t\t\t\t\tAdd_edge(Calc(d,i,j),Calc(max(d-D,<span class=\"number\">1</span>),tox,toy),INF);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">BFS</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(Dis,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(Dis));</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;Q; Q.push(st); Dis[st]=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(!Q.empty())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tmp=Q.front(); Q.pop();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[tmp],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(Dis[y]==<span class=\"number\">-1</span> &amp;&amp; Edge[i].flow)&#123;</div><div class=\"line\">\t\t\t\tDis[y]=Dis[tmp]+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\tQ.push(y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> Dis[en]==<span class=\"number\">-1</span>? <span class=\"number\">0</span>:<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> flow)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(x==en || flow==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> flow;</div><div class=\"line\">\t<span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> &amp;i=cur[x],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(Dis[y]==Dis[x]+<span class=\"number\">1</span> &amp;&amp; Edge[i].flow)&#123;</div><div class=\"line\">\t        <span class=\"keyword\">int</span> k=DFS(y,min(Edge[i].flow,flow));</div><div class=\"line\">\t\t\ttmp+=k; flow-=k; Edge[i].flow-=k; Edge[i^<span class=\"number\">1</span>].flow+=k;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flow)<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dinic</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>,Ans=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(BFS())&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(cur,head,<span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(tmp=DFS(st,INF))Ans+=tmp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,Ans);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tInit();</div><div class=\"line\">\tBuild();</div><div class=\"line\">\tDinic();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}