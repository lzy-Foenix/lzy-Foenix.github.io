{"tags":[{"name":"树形动规","permalink":"http://lzy-foenix.github.io/tags/树形动规/","url":"\\async\\tags\\树形动规.json","count":2}],"categories":[{"name":"动态规划","permalink":"http://lzy-foenix.github.io/categories/动态规划/","url":"\\async\\categories\\动态规划.json","count":11}],"url":"\\async\\posts\\2015\\04\\19\\BZOJ-3522-POI2014-Hotel.json","date":1429434344000,"path":{"year":2015,"month":4,"day":19,"name":"BZOJ-3522-POI2014-Hotel"},"title":"BZOJ-[Poi2014]Hotel","permalink":"http://lzy-foenix.github.io/2015/04/19/BZOJ-3522-POI2014-Hotel/","content":"<hr>\n<a id=\"more\"></a>\n<h3 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h3><p>正解是树形动规，但是数据范围就暴露了他可以暴力的真谛，于是我们就直接暴力就可以了。<br>暴力枚举中点，然后以中点为根，遍历每一棵子树，找深度相同的点，乘起来。<br>显然如果当前点只有两棵子树的话，显然是不行的。所以开两个数组来记录，一个s1记录当前深度的点有多少，一个s2记录以前的答案，然后对于新出现深度为d的点，最终答案就加上s2[j]*Sum[j]。</p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN=<span class=\"number\">5005</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> node&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> to,next;</div><div class=\"line\">&#125;Edge[MAXN&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">LL Ans;</div><div class=\"line\"><span class=\"keyword\">int</span> N,len,Maxdeep;</div><div class=\"line\"><span class=\"keyword\">int</span> head[MAXN],fa[MAXN],Deep[MAXN],Sum[MAXN];</div><div class=\"line\">LL s1[MAXN],s2[MAXN];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tlen++; Edge[len].to=b; Edge[len].next=head[a]; head[a]=len;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(s1,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(s1));</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(s2,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(s2));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> fa)</span></span>&#123;</div><div class=\"line\">    Maxdeep=max(Deep[x],Maxdeep);</div><div class=\"line\">\tSum[Deep[x]]++;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(y!=fa)&#123;</div><div class=\"line\">            Deep[y]=Deep[x]+<span class=\"number\">1</span>;  DFS(y,x);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">\tClear();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x],y=Edge[i].to;i;i=Edge[i].next,y=Edge[i].to)&#123;</div><div class=\"line\">\t\tDeep[y]=<span class=\"number\">1</span>;</div><div class=\"line\">\t\tDFS(y,x);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=Maxdeep;j++)&#123;</div><div class=\"line\">\t\t\tAns+=Sum[j]*s2[j];</div><div class=\"line\">\t\t\ts2[j]+=Sum[j]*s1[j];</div><div class=\"line\">\t\t\ts1[j]+=Sum[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=Maxdeep;j++)Sum[j]=<span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;N);</div><div class=\"line\">    <span class=\"keyword\">int</span> a,b;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;N;i++)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;a,&amp;b);</div><div class=\"line\">\t\tAdd_edge(a,b); Add_edge(b,a);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=N;i++)&#123;</div><div class=\"line\">\t\tWork(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,Ans);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}